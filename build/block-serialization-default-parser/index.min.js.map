{"version":3,"file":"./build/block-serialization-default-parser/index.min.js","mappings":"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","sources":["webpack://wp/webpack/bootstrap","webpack://wp/webpack/runtime/define property getters","webpack://wp/webpack/runtime/hasOwnProperty shorthand","webpack://wp/webpack/runtime/make namespace object","../../packages/block-serialization-default-parser/src/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\r\n * @type {string}\r\n */\r\nlet document;\r\n/**\r\n * @type {number}\r\n */\r\nlet offset;\r\n/**\r\n * @type {ParsedBlock[]}\r\n */\r\nlet output;\r\n/**\r\n * @type {ParsedFrame[]}\r\n */\r\nlet stack;\r\n\r\n/**\r\n * @typedef {Object|null} Attributes\r\n */\r\n\r\n/**\r\n * @typedef {Object} ParsedBlock\r\n * @property {string|null}        blockName    Block name.\r\n * @property {Attributes}         attrs        Block attributes.\r\n * @property {ParsedBlock[]}      innerBlocks  Inner blocks.\r\n * @property {string}             innerHTML    Inner HTML.\r\n * @property {Array<string|null>} innerContent Inner content.\r\n */\r\n\r\n/**\r\n * @typedef {Object} ParsedFrame\r\n * @property {ParsedBlock} block            Block.\r\n * @property {number}      tokenStart       Token start.\r\n * @property {number}      tokenLength      Token length.\r\n * @property {number}      prevOffset       Previous offset.\r\n * @property {number|null} leadingHtmlStart Leading HTML start.\r\n */\r\n\r\n/**\r\n * @typedef {'no-more-tokens'|'void-block'|'block-opener'|'block-closer'} TokenType\r\n */\r\n\r\n/**\r\n * @typedef {[TokenType, string, Attributes, number, number]} Token\r\n */\r\n\r\n/**\r\n * Matches block comment delimiters\r\n *\r\n * While most of this pattern is straightforward the attribute parsing\r\n * incorporates a tricks to make sure we don't choke on specific input\r\n *\r\n *  - since JavaScript has no possessive quantifier or atomic grouping\r\n *    we are emulating it with a trick\r\n *\r\n *    we want a possessive quantifier or atomic group to prevent backtracking\r\n *    on the `}`s should we fail to match the remainder of the pattern\r\n *\r\n *    we can emulate this with a positive lookahead and back reference\r\n *    (a++)*c === ((?=(a+))\\1)*c\r\n *\r\n *    let's examine an example:\r\n *      - /(a+)*c/.test('aaaaaaaaaaaaad') fails after over 49,000 steps\r\n *      - /(a++)*c/.test('aaaaaaaaaaaaad') fails after 85 steps\r\n *      - /(?>a+)*c/.test('aaaaaaaaaaaaad') fails after 126 steps\r\n *\r\n *    this is because the possessive `++` and the atomic group `(?>)`\r\n *    tell the engine that all those `a`s belong together as a single group\r\n *    and so it won't split it up when stepping backwards to try and match\r\n *\r\n *    if we use /((?=(a+))\\1)*c/ then we get the same behavior as the atomic group\r\n *    or possessive and prevent the backtracking because the `a+` is matched but\r\n *    not captured. thus, we find the long string of `a`s and remember it, then\r\n *    reference it as a whole unit inside our pattern\r\n *\r\n *    @see http://instanceof.me/post/52245507631/regex-emulate-atomic-grouping-with-lookahead\r\n *    @see http://blog.stevenlevithan.com/archives/mimic-atomic-groups\r\n *    @see https://javascript.info/regexp-infinite-backtracking-problem\r\n *\r\n *    once browsers reliably support atomic grouping or possessive\r\n *    quantifiers natively we should remove this trick and simplify\r\n *\r\n * @type {RegExp}\r\n *\r\n * @since 3.8.0\r\n * @since 4.6.1 added optimization to prevent backtracking on attribute parsing\r\n */\r\nconst tokenizer =\r\n\t/<!--\\s+(\\/)?wp:([a-z][a-z0-9_-]*\\/)?([a-z][a-z0-9_-]*)\\s+({(?:(?=([^}]+|}+(?=})|(?!}\\s+\\/?-->)[^])*)\\5|[^]*?)}\\s+)?(\\/)?-->/g;\r\n\r\n/**\r\n * Constructs a block object.\r\n *\r\n * @param {string|null}   blockName\r\n * @param {Attributes}    attrs\r\n * @param {ParsedBlock[]} innerBlocks\r\n * @param {string}        innerHTML\r\n * @param {string[]}      innerContent\r\n * @return {ParsedBlock} The block object.\r\n */\r\nfunction Block( blockName, attrs, innerBlocks, innerHTML, innerContent ) {\r\n\treturn {\r\n\t\tblockName,\r\n\t\tattrs,\r\n\t\tinnerBlocks,\r\n\t\tinnerHTML,\r\n\t\tinnerContent,\r\n\t};\r\n}\r\n\r\n/**\r\n * Constructs a freeform block object.\r\n *\r\n * @param {string} innerHTML\r\n * @return {ParsedBlock} The freeform block object.\r\n */\r\nfunction Freeform( innerHTML ) {\r\n\treturn Block( null, {}, [], innerHTML, [ innerHTML ] );\r\n}\r\n\r\n/**\r\n * Constructs a frame object.\r\n *\r\n * @param {ParsedBlock} block\r\n * @param {number}      tokenStart\r\n * @param {number}      tokenLength\r\n * @param {number}      prevOffset\r\n * @param {number|null} leadingHtmlStart\r\n * @return {ParsedFrame} The frame object.\r\n */\r\nfunction Frame( block, tokenStart, tokenLength, prevOffset, leadingHtmlStart ) {\r\n\treturn {\r\n\t\tblock,\r\n\t\ttokenStart,\r\n\t\ttokenLength,\r\n\t\tprevOffset: prevOffset || tokenStart + tokenLength,\r\n\t\tleadingHtmlStart,\r\n\t};\r\n}\r\n\r\n/**\r\n * Parser function, that converts input HTML into a block based structure.\r\n *\r\n * @param {string} doc The HTML document to parse.\r\n *\r\n * @example\r\n * Input post:\r\n * ```html\r\n * <!-- wp:columns {\"columns\":3} -->\r\n * <div class=\"wp-block-columns has-3-columns\"><!-- wp:column -->\r\n * <div class=\"wp-block-column\"><!-- wp:paragraph -->\r\n * <p>Left</p>\r\n * <!-- /wp:paragraph --></div>\r\n * <!-- /wp:column -->\r\n *\r\n * <!-- wp:column -->\r\n * <div class=\"wp-block-column\"><!-- wp:paragraph -->\r\n * <p><strong>Middle</strong></p>\r\n * <!-- /wp:paragraph --></div>\r\n * <!-- /wp:column -->\r\n *\r\n * <!-- wp:column -->\r\n * <div class=\"wp-block-column\"></div>\r\n * <!-- /wp:column --></div>\r\n * <!-- /wp:columns -->\r\n * ```\r\n *\r\n * Parsing code:\r\n * ```js\r\n * import { parse } from '@wordpress/block-serialization-default-parser';\r\n *\r\n * parse( post ) === [\r\n *     {\r\n *         blockName: \"core/columns\",\r\n *         attrs: {\r\n *             columns: 3\r\n *         },\r\n *         innerBlocks: [\r\n *             {\r\n *                 blockName: \"core/column\",\r\n *                 attrs: null,\r\n *                 innerBlocks: [\r\n *                     {\r\n *                         blockName: \"core/paragraph\",\r\n *                         attrs: null,\r\n *                         innerBlocks: [],\r\n *                         innerHTML: \"\\n<p>Left</p>\\n\"\r\n *                     }\r\n *                 ],\r\n *                 innerHTML: '\\n<div class=\"wp-block-column\"></div>\\n'\r\n *             },\r\n *             {\r\n *                 blockName: \"core/column\",\r\n *                 attrs: null,\r\n *                 innerBlocks: [\r\n *                     {\r\n *                         blockName: \"core/paragraph\",\r\n *                         attrs: null,\r\n *                         innerBlocks: [],\r\n *                         innerHTML: \"\\n<p><strong>Middle</strong></p>\\n\"\r\n *                     }\r\n *                 ],\r\n *                 innerHTML: '\\n<div class=\"wp-block-column\"></div>\\n'\r\n *             },\r\n *             {\r\n *                 blockName: \"core/column\",\r\n *                 attrs: null,\r\n *                 innerBlocks: [],\r\n *                 innerHTML: '\\n<div class=\"wp-block-column\"></div>\\n'\r\n *             }\r\n *         ],\r\n *         innerHTML: '\\n<div class=\"wp-block-columns has-3-columns\">\\n\\n\\n\\n</div>\\n'\r\n *     }\r\n * ];\r\n * ```\r\n * @return {ParsedBlock[]} A block-based representation of the input HTML.\r\n */\r\nexport const parse = ( doc ) => {\r\n\tdocument = doc;\r\n\toffset = 0;\r\n\toutput = [];\r\n\tstack = [];\r\n\ttokenizer.lastIndex = 0;\r\n\r\n\tdo {\r\n\t\t// twiddle our thumbs\r\n\t} while ( proceed() );\r\n\r\n\treturn output;\r\n};\r\n\r\n/**\r\n * Parses the next token in the input document.\r\n *\r\n * @return {boolean} Returns true when there is more tokens to parse.\r\n */\r\nfunction proceed() {\r\n\tconst stackDepth = stack.length;\r\n\tconst next = nextToken();\r\n\tconst [ tokenType, blockName, attrs, startOffset, tokenLength ] = next;\r\n\r\n\t// We may have some HTML soup before the next block.\r\n\tconst leadingHtmlStart = startOffset > offset ? offset : null;\r\n\r\n\tswitch ( tokenType ) {\r\n\t\tcase 'no-more-tokens':\r\n\t\t\t// If not in a block then flush output.\r\n\t\t\tif ( 0 === stackDepth ) {\r\n\t\t\t\taddFreeform();\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\t// Otherwise we have a problem\r\n\t\t\t// This is an error\r\n\t\t\t// we have options\r\n\t\t\t//  - treat it all as freeform text\r\n\t\t\t//  - assume an implicit closer (easiest when not nesting)\r\n\r\n\t\t\t// For the easy case we'll assume an implicit closer.\r\n\t\t\tif ( 1 === stackDepth ) {\r\n\t\t\t\taddBlockFromStack();\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\t// For the nested case where it's more difficult we'll\r\n\t\t\t// have to assume that multiple closers are missing\r\n\t\t\t// and so we'll collapse the whole stack piecewise.\r\n\t\t\twhile ( 0 < stack.length ) {\r\n\t\t\t\taddBlockFromStack();\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\tcase 'void-block':\r\n\t\t\t// easy case is if we stumbled upon a void block\r\n\t\t\t// in the top-level of the document.\r\n\t\t\tif ( 0 === stackDepth ) {\r\n\t\t\t\tif ( null !== leadingHtmlStart ) {\r\n\t\t\t\t\toutput.push(\r\n\t\t\t\t\t\tFreeform(\r\n\t\t\t\t\t\t\tdocument.substr(\r\n\t\t\t\t\t\t\t\tleadingHtmlStart,\r\n\t\t\t\t\t\t\t\tstartOffset - leadingHtmlStart\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t\toutput.push( Block( blockName, attrs, [], '', [] ) );\r\n\t\t\t\toffset = startOffset + tokenLength;\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\t// Otherwise we found an inner block.\r\n\t\t\taddInnerBlock(\r\n\t\t\t\tBlock( blockName, attrs, [], '', [] ),\r\n\t\t\t\tstartOffset,\r\n\t\t\t\ttokenLength\r\n\t\t\t);\r\n\t\t\toffset = startOffset + tokenLength;\r\n\t\t\treturn true;\r\n\r\n\t\tcase 'block-opener':\r\n\t\t\t// Track all newly-opened blocks on the stack.\r\n\t\t\tstack.push(\r\n\t\t\t\tFrame(\r\n\t\t\t\t\tBlock( blockName, attrs, [], '', [] ),\r\n\t\t\t\t\tstartOffset,\r\n\t\t\t\t\ttokenLength,\r\n\t\t\t\t\tstartOffset + tokenLength,\r\n\t\t\t\t\tleadingHtmlStart\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t\t\toffset = startOffset + tokenLength;\r\n\t\t\treturn true;\r\n\r\n\t\tcase 'block-closer':\r\n\t\t\t// If we're missing an opener we're in trouble\r\n\t\t\t// This is an error.\r\n\t\t\tif ( 0 === stackDepth ) {\r\n\t\t\t\t// We have options\r\n\t\t\t\t//  - assume an implicit opener\r\n\t\t\t\t//  - assume _this_ is the opener\r\n\t\t\t\t// - give up and close out the document.\r\n\t\t\t\taddFreeform();\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\t// If we're not nesting then this is easy - close the block.\r\n\t\t\tif ( 1 === stackDepth ) {\r\n\t\t\t\taddBlockFromStack( startOffset );\r\n\t\t\t\toffset = startOffset + tokenLength;\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\t// Otherwise we're nested and we have to close out the current\r\n\t\t\t// block and add it as a innerBlock to the parent.\r\n\t\t\tconst stackTop = /** @type {ParsedFrame} */ ( stack.pop() );\r\n\t\t\tconst html = document.substr(\r\n\t\t\t\tstackTop.prevOffset,\r\n\t\t\t\tstartOffset - stackTop.prevOffset\r\n\t\t\t);\r\n\t\t\tstackTop.block.innerHTML += html;\r\n\t\t\tstackTop.block.innerContent.push( html );\r\n\t\t\tstackTop.prevOffset = startOffset + tokenLength;\r\n\r\n\t\t\taddInnerBlock(\r\n\t\t\t\tstackTop.block,\r\n\t\t\t\tstackTop.tokenStart,\r\n\t\t\t\tstackTop.tokenLength,\r\n\t\t\t\tstartOffset + tokenLength\r\n\t\t\t);\r\n\t\t\toffset = startOffset + tokenLength;\r\n\t\t\treturn true;\r\n\r\n\t\tdefault:\r\n\t\t\t// This is an error.\r\n\t\t\taddFreeform();\r\n\t\t\treturn false;\r\n\t}\r\n}\r\n\r\n/**\r\n * Parse JSON if valid, otherwise return null\r\n *\r\n * Note that JSON coming from the block comment\r\n * delimiters is constrained to be an object\r\n * and cannot be things like `true` or `null`\r\n *\r\n * @param {string} input JSON input string to parse\r\n * @return {Object|null} parsed JSON if valid\r\n */\r\nfunction parseJSON( input ) {\r\n\ttry {\r\n\t\treturn JSON.parse( input );\r\n\t} catch ( e ) {\r\n\t\treturn null;\r\n\t}\r\n}\r\n\r\n/**\r\n * Finds the next token in the document.\r\n *\r\n * @return {Token} The next matched token.\r\n */\r\nfunction nextToken() {\r\n\t// Aye the magic\r\n\t// we're using a single RegExp to tokenize the block comment delimiters\r\n\t// we're also using a trick here because the only difference between a\r\n\t// block opener and a block closer is the leading `/` before `wp:` (and\r\n\t// a closer has no attributes). we can trap them both and process the\r\n\t// match back in JavaScript to see which one it was.\r\n\tconst matches = tokenizer.exec( document );\r\n\r\n\t// We have no more tokens.\r\n\tif ( null === matches ) {\r\n\t\treturn [ 'no-more-tokens', '', null, 0, 0 ];\r\n\t}\r\n\r\n\tconst startedAt = matches.index;\r\n\tconst [\r\n\t\tmatch,\r\n\t\tcloserMatch,\r\n\t\tnamespaceMatch,\r\n\t\tnameMatch,\r\n\t\tattrsMatch /* Internal/unused. */,\r\n\t\t,\r\n\t\tvoidMatch,\r\n\t] = matches;\r\n\r\n\tconst length = match.length;\r\n\tconst isCloser = !! closerMatch;\r\n\tconst isVoid = !! voidMatch;\r\n\tconst namespace = namespaceMatch || 'core/';\r\n\tconst name = namespace + nameMatch;\r\n\tconst hasAttrs = !! attrsMatch;\r\n\tconst attrs = hasAttrs ? parseJSON( attrsMatch ) : {};\r\n\r\n\t// This state isn't allowed\r\n\t// This is an error.\r\n\tif ( isCloser && ( isVoid || hasAttrs ) ) {\r\n\t\t// We can ignore them since they don't hurt anything\r\n\t\t// we may warn against this at some point or reject it.\r\n\t}\r\n\r\n\tif ( isVoid ) {\r\n\t\treturn [ 'void-block', name, attrs, startedAt, length ];\r\n\t}\r\n\r\n\tif ( isCloser ) {\r\n\t\treturn [ 'block-closer', name, null, startedAt, length ];\r\n\t}\r\n\r\n\treturn [ 'block-opener', name, attrs, startedAt, length ];\r\n}\r\n\r\n/**\r\n * Adds a freeform block to the output.\r\n *\r\n * @param {number} [rawLength]\r\n */\r\nfunction addFreeform( rawLength ) {\r\n\tconst length = rawLength ? rawLength : document.length - offset;\r\n\r\n\tif ( 0 === length ) {\r\n\t\treturn;\r\n\t}\r\n\r\n\toutput.push( Freeform( document.substr( offset, length ) ) );\r\n}\r\n\r\n/**\r\n * Adds inner block to the parent block.\r\n *\r\n * @param {ParsedBlock} block\r\n * @param {number}      tokenStart\r\n * @param {number}      tokenLength\r\n * @param {number}      [lastOffset]\r\n */\r\nfunction addInnerBlock( block, tokenStart, tokenLength, lastOffset ) {\r\n\tconst parent = stack[ stack.length - 1 ];\r\n\tparent.block.innerBlocks.push( block );\r\n\tconst html = document.substr(\r\n\t\tparent.prevOffset,\r\n\t\ttokenStart - parent.prevOffset\r\n\t);\r\n\r\n\tif ( html ) {\r\n\t\tparent.block.innerHTML += html;\r\n\t\tparent.block.innerContent.push( html );\r\n\t}\r\n\r\n\tparent.block.innerContent.push( null );\r\n\tparent.prevOffset = lastOffset ? lastOffset : tokenStart + tokenLength;\r\n}\r\n\r\n/**\r\n * Adds block from the stack to the output.\r\n *\r\n * @param {number} [endOffset]\r\n */\r\nfunction addBlockFromStack( endOffset ) {\r\n\tconst { block, leadingHtmlStart, prevOffset, tokenStart } =\r\n\t\t/** @type {ParsedFrame} */ ( stack.pop() );\r\n\r\n\tconst html = endOffset\r\n\t\t? document.substr( prevOffset, endOffset - prevOffset )\r\n\t\t: document.substr( prevOffset );\r\n\r\n\tif ( html ) {\r\n\t\tblock.innerHTML += html;\r\n\t\tblock.innerContent.push( html );\r\n\t}\r\n\r\n\tif ( null !== leadingHtmlStart ) {\r\n\t\toutput.push(\r\n\t\t\tFreeform(\r\n\t\t\t\tdocument.substr(\r\n\t\t\t\t\tleadingHtmlStart,\r\n\t\t\t\t\ttokenStart - leadingHtmlStart\r\n\t\t\t\t)\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\toutput.push( block );\r\n}\r\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","document","offset","output","stack","tokenizer","Block","blockName","attrs","innerBlocks","innerHTML","innerContent","Freeform","parse","doc","lastIndex","proceed","stackDepth","length","next","matches","exec","startedAt","index","match","closerMatch","namespaceMatch","nameMatch","attrsMatch","voidMatch","isCloser","isVoid","name","input","JSON","e","parseJSON","nextToken","tokenType","startOffset","tokenLength","leadingHtmlStart","addFreeform","addBlockFromStack","push","substr","addInnerBlock","block","tokenStart","prevOffset","Frame","stackTop","pop","html","rawLength","lastOffset","parent","endOffset"],"sourceRoot":""}