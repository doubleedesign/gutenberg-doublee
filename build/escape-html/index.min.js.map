{"version":3,"file":"./build/escape-html/index.min.js","mappings":"mBACA,IAAIA,EAAsB,CCA1BA,EAAwB,CAACC,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXF,EAAoBI,EAAEF,EAAYC,KAASH,EAAoBI,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDH,EAAwB,CAACS,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFV,EAAyBC,IACH,oBAAXa,QAA0BA,OAAOC,aAC1CV,OAAOC,eAAeL,EAASa,OAAOC,YAAa,CAAEC,MAAO,WAE7DX,OAAOC,eAAeL,EAAS,aAAc,CAAEe,OAAO,GAAO,G,qLCW9D,MAAMC,EAAgC,sCAgB/B,SAASC,EAAiBF,GAChC,OAAOA,EAAMG,QAAS,0CAA2C,QAClE,CASO,SAASC,EAAqBJ,GACpC,OAAOA,EAAMG,QAAS,KAAM,SAC7B,CASO,SAASE,EAAgBL,GAC/B,OAAOA,EAAMG,QAAS,KAAM,OAC7B,CAsBO,SAASG,EAAiBN,GAChC,OCnEc,SAAsCA,GACpD,OAAOA,EAAMG,QAAS,KAAM,OAC7B,CDiEQI,CACNH,EAAqBF,EAAiBF,IAExC,CAcO,SAASQ,EAAYR,GAC3B,OAAOK,EAAgBH,EAAiBF,GACzC,CAWO,SAASS,EAAoBT,GACnC,OAAOK,EAAgBL,EAAMG,QAAS,KAAM,SAC7C,CASO,SAASO,EAAsBC,GACrC,OAASV,EAA8BW,KAAMD,EAC9C,E","sources":["webpack://wp/webpack/bootstrap","webpack://wp/webpack/runtime/define property getters","webpack://wp/webpack/runtime/hasOwnProperty shorthand","webpack://wp/webpack/runtime/make namespace object","../../packages/escape-html/src/index.js","../../packages/escape-html/src/escape-greater.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\r\n * Internal dependencies\r\n */\r\nimport __unstableEscapeGreaterThan from './escape-greater';\r\n\r\n/**\r\n * Regular expression matching invalid attribute names.\r\n *\r\n * \"Attribute names must consist of one or more characters other than controls,\r\n * U+0020 SPACE, U+0022 (\"), U+0027 ('), U+003E (>), U+002F (/), U+003D (=),\r\n * and noncharacters.\"\r\n *\r\n * @see https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\r\n *\r\n * @type {RegExp}\r\n */\r\nconst REGEXP_INVALID_ATTRIBUTE_NAME = /[\\u007F-\\u009F \"'>/=\"\\uFDD0-\\uFDEF]/;\r\n\r\n/**\r\n * Returns a string with ampersands escaped. Note that this is an imperfect\r\n * implementation, where only ampersands which do not appear as a pattern of\r\n * named, decimal, or hexadecimal character references are escaped. Invalid\r\n * named references (i.e. ambiguous ampersand) are still permitted.\r\n *\r\n * @see https://w3c.github.io/html/syntax.html#character-references\r\n * @see https://w3c.github.io/html/syntax.html#ambiguous-ampersand\r\n * @see https://w3c.github.io/html/syntax.html#named-character-references\r\n *\r\n * @param {string} value Original string.\r\n *\r\n * @return {string} Escaped string.\r\n */\r\nexport function escapeAmpersand( value ) {\r\n\treturn value.replace( /&(?!([a-z0-9]+|#[0-9]+|#x[a-f0-9]+);)/gi, '&amp;' );\r\n}\r\n\r\n/**\r\n * Returns a string with quotation marks replaced.\r\n *\r\n * @param {string} value Original string.\r\n *\r\n * @return {string} Escaped string.\r\n */\r\nexport function escapeQuotationMark( value ) {\r\n\treturn value.replace( /\"/g, '&quot;' );\r\n}\r\n\r\n/**\r\n * Returns a string with less-than sign replaced.\r\n *\r\n * @param {string} value Original string.\r\n *\r\n * @return {string} Escaped string.\r\n */\r\nexport function escapeLessThan( value ) {\r\n\treturn value.replace( /</g, '&lt;' );\r\n}\r\n\r\n/**\r\n * Returns an escaped attribute value.\r\n *\r\n * @see https://w3c.github.io/html/syntax.html#elements-attributes\r\n *\r\n * \"[...] the text cannot contain an ambiguous ampersand [...] must not contain\r\n * any literal U+0022 QUOTATION MARK characters (\")\"\r\n *\r\n * Note we also escape the greater than symbol, as this is used by wptexturize to\r\n * split HTML strings. This is a WordPress specific fix\r\n *\r\n * Note that if a resolution for Trac#45387 comes to fruition, it is no longer\r\n * necessary for `__unstableEscapeGreaterThan` to be used.\r\n *\r\n * See: https://core.trac.wordpress.org/ticket/45387\r\n *\r\n * @param {string} value Attribute value.\r\n *\r\n * @return {string} Escaped attribute value.\r\n */\r\nexport function escapeAttribute( value ) {\r\n\treturn __unstableEscapeGreaterThan(\r\n\t\tescapeQuotationMark( escapeAmpersand( value ) )\r\n\t);\r\n}\r\n\r\n/**\r\n * Returns an escaped HTML element value.\r\n *\r\n * @see https://w3c.github.io/html/syntax.html#writing-html-documents-elements\r\n *\r\n * \"the text must not contain the character U+003C LESS-THAN SIGN (<) or an\r\n * ambiguous ampersand.\"\r\n *\r\n * @param {string} value Element value.\r\n *\r\n * @return {string} Escaped HTML element value.\r\n */\r\nexport function escapeHTML( value ) {\r\n\treturn escapeLessThan( escapeAmpersand( value ) );\r\n}\r\n\r\n/**\r\n * Returns an escaped Editable HTML element value. This is different from\r\n * `escapeHTML`, because for editable HTML, ALL ampersands must be escaped in\r\n * order to render the content correctly on the page.\r\n *\r\n * @param {string} value Element value.\r\n *\r\n * @return {string} Escaped HTML element value.\r\n */\r\nexport function escapeEditableHTML( value ) {\r\n\treturn escapeLessThan( value.replace( /&/g, '&amp;' ) );\r\n}\r\n\r\n/**\r\n * Returns true if the given attribute name is valid, or false otherwise.\r\n *\r\n * @param {string} name Attribute name to test.\r\n *\r\n * @return {boolean} Whether attribute is valid.\r\n */\r\nexport function isValidAttributeName( name ) {\r\n\treturn ! REGEXP_INVALID_ATTRIBUTE_NAME.test( name );\r\n}\r\n","/**\r\n * Returns a string with greater-than sign replaced.\r\n *\r\n * Note that if a resolution for Trac#45387 comes to fruition, it is no longer\r\n * necessary for `__unstableEscapeGreaterThan` to exist.\r\n *\r\n * See: https://core.trac.wordpress.org/ticket/45387\r\n *\r\n * @param {string} value Original string.\r\n *\r\n * @return {string} Escaped string.\r\n */\r\nexport default function __unstableEscapeGreaterThan( value ) {\r\n\treturn value.replace( />/g, '&gt;' );\r\n}\r\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","REGEXP_INVALID_ATTRIBUTE_NAME","escapeAmpersand","replace","escapeQuotationMark","escapeLessThan","escapeAttribute","__unstableEscapeGreaterThan","escapeHTML","escapeEditableHTML","isValidAttributeName","name","test"],"sourceRoot":""}