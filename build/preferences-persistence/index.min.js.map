{"version":3,"file":"./build/preferences-persistence/index.min.js","mappings":"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","sources":["webpack://wp/webpack/bootstrap","webpack://wp/webpack/runtime/compat get default export","webpack://wp/webpack/runtime/define property getters","webpack://wp/webpack/runtime/hasOwnProperty shorthand","webpack://wp/webpack/runtime/make namespace object","webpack://wp/external window [\"wp\",\"apiFetch\"]","../../packages/preferences-persistence/src/create/index.js","../../packages/preferences-persistence/src/create/debounce-async.js","../../packages/preferences-persistence/src/migrations/legacy-local-storage-data/move-feature-preferences.js","../../packages/preferences-persistence/src/migrations/legacy-local-storage-data/move-individual-preference.js","../../packages/preferences-persistence/src/migrations/legacy-local-storage-data/convert-edit-post-panels.js","../../packages/preferences-persistence/src/migrations/legacy-local-storage-data/index.js","../../packages/preferences-persistence/src/migrations/legacy-local-storage-data/move-interface-enable-items.js","../../packages/preferences-persistence/src/migrations/legacy-local-storage-data/move-third-party-feature-preferences.js","../../packages/preferences-persistence/src/migrations/preferences-package-data/index.js","../../packages/preferences-persistence/src/migrations/preferences-package-data/convert-complementary-areas.js","../../packages/preferences-persistence/src/migrations/preferences-package-data/convert-editor-settings.js","../../packages/preferences-persistence/src/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"apiFetch\"];","/**\r\n * WordPress dependencies\r\n */\r\nimport apiFetch from '@wordpress/api-fetch';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport debounceAsync from './debounce-async';\r\n\r\nconst EMPTY_OBJECT = {};\r\nconst localStorage = window.localStorage;\r\n\r\n/**\r\n * Creates a persistence layer that stores data in WordPress user meta via the\r\n * REST API.\r\n *\r\n * @param {Object}  options\r\n * @param {?Object} options.preloadedData          Any persisted preferences data that should be preloaded.\r\n *                                                 When set, the persistence layer will avoid fetching data\r\n *                                                 from the REST API.\r\n * @param {?string} options.localStorageRestoreKey The key to use for restoring the localStorage backup, used\r\n *                                                 when the persistence layer calls `localStorage.getItem` or\r\n *                                                 `localStorage.setItem`.\r\n * @param {?number} options.requestDebounceMS      Debounce requests to the API so that they only occur at\r\n *                                                 minimum every `requestDebounceMS` milliseconds, and don't\r\n *                                                 swamp the server. Defaults to 2500ms.\r\n *\r\n * @return {Object} A persistence layer for WordPress user meta.\r\n */\r\nexport default function create( {\r\n\tpreloadedData,\r\n\tlocalStorageRestoreKey = 'WP_PREFERENCES_RESTORE_DATA',\r\n\trequestDebounceMS = 2500,\r\n} = {} ) {\r\n\tlet cache = preloadedData;\r\n\tconst debouncedApiFetch = debounceAsync( apiFetch, requestDebounceMS );\r\n\r\n\tasync function get() {\r\n\t\tif ( cache ) {\r\n\t\t\treturn cache;\r\n\t\t}\r\n\r\n\t\tconst user = await apiFetch( {\r\n\t\t\tpath: '/wp/v2/users/me?context=edit',\r\n\t\t} );\r\n\r\n\t\tconst serverData = user?.meta?.persisted_preferences;\r\n\t\tconst localData = JSON.parse(\r\n\t\t\tlocalStorage.getItem( localStorageRestoreKey )\r\n\t\t);\r\n\r\n\t\t// Date parse returns NaN for invalid input. Coerce anything invalid\r\n\t\t// into a conveniently comparable zero.\r\n\t\tconst serverTimestamp = Date.parse( serverData?._modified ) || 0;\r\n\t\tconst localTimestamp = Date.parse( localData?._modified ) || 0;\r\n\r\n\t\t// Prefer server data if it exists and is more recent.\r\n\t\t// Otherwise fallback to localStorage data.\r\n\t\tif ( serverData && serverTimestamp >= localTimestamp ) {\r\n\t\t\tcache = serverData;\r\n\t\t} else if ( localData ) {\r\n\t\t\tcache = localData;\r\n\t\t} else {\r\n\t\t\tcache = EMPTY_OBJECT;\r\n\t\t}\r\n\r\n\t\treturn cache;\r\n\t}\r\n\r\n\tfunction set( newData ) {\r\n\t\tconst dataWithTimestamp = {\r\n\t\t\t...newData,\r\n\t\t\t_modified: new Date().toISOString(),\r\n\t\t};\r\n\t\tcache = dataWithTimestamp;\r\n\r\n\t\t// Store data in local storage as a fallback. If for some reason the\r\n\t\t// api request does not complete or becomes unavailable, this data\r\n\t\t// can be used to restore preferences.\r\n\t\tlocalStorage.setItem(\r\n\t\t\tlocalStorageRestoreKey,\r\n\t\t\tJSON.stringify( dataWithTimestamp )\r\n\t\t);\r\n\r\n\t\t// The user meta endpoint seems susceptible to errors when consecutive\r\n\t\t// requests are made in quick succession. Ensure there's a gap between\r\n\t\t// any consecutive requests.\r\n\t\t//\r\n\t\t// Catch and do nothing with errors from the REST API.\r\n\t\tdebouncedApiFetch( {\r\n\t\t\tpath: '/wp/v2/users/me',\r\n\t\t\tmethod: 'PUT',\r\n\t\t\t// `keepalive` will still send the request in the background,\r\n\t\t\t// even when a browser unload event might interrupt it.\r\n\t\t\t// This should hopefully make things more resilient.\r\n\t\t\t// This does have a size limit of 64kb, but the data is usually\r\n\t\t\t// much less.\r\n\t\t\tkeepalive: true,\r\n\t\t\tdata: {\r\n\t\t\t\tmeta: {\r\n\t\t\t\t\tpersisted_preferences: dataWithTimestamp,\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t} ).catch( () => {} );\r\n\t}\r\n\r\n\treturn {\r\n\t\tget,\r\n\t\tset,\r\n\t};\r\n}\r\n","/**\r\n * Performs a leading edge debounce of async functions.\r\n *\r\n * If three functions are throttled at the same time:\r\n * - The first happens immediately.\r\n * - The second is never called.\r\n * - The third happens `delayMS` milliseconds after the first has resolved.\r\n *\r\n * This is distinct from `{ debounce } from @wordpress/compose` in that it\r\n * waits for promise resolution.\r\n *\r\n * @param {Function} func    A function that returns a promise.\r\n * @param {number}   delayMS A delay in milliseconds.\r\n *\r\n * @return {Function} A function that debounce whatever function is passed\r\n *                    to it.\r\n */\r\nexport default function debounceAsync( func, delayMS ) {\r\n\tlet timeoutId;\r\n\tlet activePromise;\r\n\r\n\treturn async function debounced( ...args ) {\r\n\t\t// This is a leading edge debounce. If there's no promise or timeout\r\n\t\t// in progress, call the debounced function immediately.\r\n\t\tif ( ! activePromise && ! timeoutId ) {\r\n\t\t\treturn new Promise( ( resolve, reject ) => {\r\n\t\t\t\t// Keep a reference to the promise.\r\n\t\t\t\tactivePromise = func( ...args )\r\n\t\t\t\t\t.then( ( ...thenArgs ) => {\r\n\t\t\t\t\t\tresolve( ...thenArgs );\r\n\t\t\t\t\t} )\r\n\t\t\t\t\t.catch( ( error ) => {\r\n\t\t\t\t\t\treject( error );\r\n\t\t\t\t\t} )\r\n\t\t\t\t\t.finally( () => {\r\n\t\t\t\t\t\t// As soon this promise is complete, clear the way for the\r\n\t\t\t\t\t\t// next one to happen immediately.\r\n\t\t\t\t\t\tactivePromise = null;\r\n\t\t\t\t\t} );\r\n\t\t\t} );\r\n\t\t}\r\n\r\n\t\tif ( activePromise ) {\r\n\t\t\t// Let any active promises finish before queuing the next request.\r\n\t\t\tawait activePromise;\r\n\t\t}\r\n\r\n\t\t// Clear any active timeouts, abandoning any requests that have\r\n\t\t// been queued but not been made.\r\n\t\tif ( timeoutId ) {\r\n\t\t\tclearTimeout( timeoutId );\r\n\t\t\ttimeoutId = null;\r\n\t\t}\r\n\r\n\t\t// Trigger any trailing edge calls to the function.\r\n\t\treturn new Promise( ( resolve, reject ) => {\r\n\t\t\t// Schedule the next request but with a delay.\r\n\t\t\ttimeoutId = setTimeout( () => {\r\n\t\t\t\tactivePromise = func( ...args )\r\n\t\t\t\t\t.then( ( ...thenArgs ) => {\r\n\t\t\t\t\t\tresolve( ...thenArgs );\r\n\t\t\t\t\t} )\r\n\t\t\t\t\t.catch( ( error ) => {\r\n\t\t\t\t\t\treject( error );\r\n\t\t\t\t\t} )\r\n\t\t\t\t\t.finally( () => {\r\n\t\t\t\t\t\t// As soon this promise is complete, clear the way for the\r\n\t\t\t\t\t\t// next one to happen immediately.\r\n\t\t\t\t\t\tactivePromise = null;\r\n\t\t\t\t\t\ttimeoutId = null;\r\n\t\t\t\t\t} );\r\n\t\t\t}, delayMS );\r\n\t\t} );\r\n\t};\r\n}\r\n","/**\r\n * Move the 'features' object in local storage from the sourceStoreName to the\r\n * preferences store data structure.\r\n *\r\n * Previously, editors used a data structure like this for feature preferences:\r\n * ```js\r\n * {\r\n *     'core/edit-post': {\r\n *         preferences: {\r\n *             features; {\r\n *                 topToolbar: true,\r\n *                 // ... other boolean 'feature' preferences\r\n *             },\r\n *         },\r\n *     },\r\n * }\r\n * ```\r\n *\r\n * And for a while these feature preferences lived in the interface package:\r\n * ```js\r\n * {\r\n *     'core/interface': {\r\n *         preferences: {\r\n *             features: {\r\n *                 'core/edit-post': {\r\n *                     topToolbar: true\r\n *                 }\r\n *             }\r\n *         }\r\n *     }\r\n * }\r\n * ```\r\n *\r\n * In the preferences store, 'features' aren't considered special, they're\r\n * merged to the root level of the scope along with other preferences:\r\n * ```js\r\n * {\r\n *     'core/preferences': {\r\n *         preferences: {\r\n *             'core/edit-post': {\r\n *                 topToolbar: true,\r\n *                 // ... any other preferences.\r\n *             }\r\n *         }\r\n *     }\r\n * }\r\n * ```\r\n *\r\n * This function handles moving from either the source store or the interface\r\n * store to the preferences data structure.\r\n *\r\n * @param {Object} state           The state before migration.\r\n * @param {string} sourceStoreName The name of the store that has persisted\r\n *                                 preferences to migrate to the preferences\r\n *                                 package.\r\n * @return {Object} The migrated state\r\n */\r\nexport default function moveFeaturePreferences( state, sourceStoreName ) {\r\n\tconst preferencesStoreName = 'core/preferences';\r\n\tconst interfaceStoreName = 'core/interface';\r\n\r\n\t// Features most recently (and briefly) lived in the interface package.\r\n\t// If data exists there, prioritize using that for the migration. If not\r\n\t// also check the original package as the user may have updated from an\r\n\t// older block editor version.\r\n\tconst interfaceFeatures =\r\n\t\tstate?.[ interfaceStoreName ]?.preferences?.features?.[\r\n\t\t\tsourceStoreName\r\n\t\t];\r\n\tconst sourceFeatures = state?.[ sourceStoreName ]?.preferences?.features;\r\n\tconst featuresToMigrate = interfaceFeatures\r\n\t\t? interfaceFeatures\r\n\t\t: sourceFeatures;\r\n\r\n\tif ( ! featuresToMigrate ) {\r\n\t\treturn state;\r\n\t}\r\n\r\n\tconst existingPreferences = state?.[ preferencesStoreName ]?.preferences;\r\n\r\n\t// Avoid migrating features again if they've previously been migrated.\r\n\tif ( existingPreferences?.[ sourceStoreName ] ) {\r\n\t\treturn state;\r\n\t}\r\n\r\n\tlet updatedInterfaceState;\r\n\tif ( interfaceFeatures ) {\r\n\t\tconst otherInterfaceState = state?.[ interfaceStoreName ];\r\n\t\tconst otherInterfaceScopes =\r\n\t\t\tstate?.[ interfaceStoreName ]?.preferences?.features;\r\n\r\n\t\tupdatedInterfaceState = {\r\n\t\t\t[ interfaceStoreName ]: {\r\n\t\t\t\t...otherInterfaceState,\r\n\t\t\t\tpreferences: {\r\n\t\t\t\t\tfeatures: {\r\n\t\t\t\t\t\t...otherInterfaceScopes,\r\n\t\t\t\t\t\t[ sourceStoreName ]: undefined,\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t};\r\n\t}\r\n\r\n\tlet updatedSourceState;\r\n\tif ( sourceFeatures ) {\r\n\t\tconst otherSourceState = state?.[ sourceStoreName ];\r\n\t\tconst sourcePreferences = state?.[ sourceStoreName ]?.preferences;\r\n\r\n\t\tupdatedSourceState = {\r\n\t\t\t[ sourceStoreName ]: {\r\n\t\t\t\t...otherSourceState,\r\n\t\t\t\tpreferences: {\r\n\t\t\t\t\t...sourcePreferences,\r\n\t\t\t\t\tfeatures: undefined,\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t};\r\n\t}\r\n\r\n\t// Set the feature values in the interface store, the features\r\n\t// object is keyed by 'scope', which matches the store name for\r\n\t// the source.\r\n\treturn {\r\n\t\t...state,\r\n\t\t[ preferencesStoreName ]: {\r\n\t\t\tpreferences: {\r\n\t\t\t\t...existingPreferences,\r\n\t\t\t\t[ sourceStoreName ]: featuresToMigrate,\r\n\t\t\t},\r\n\t\t},\r\n\t\t...updatedInterfaceState,\r\n\t\t...updatedSourceState,\r\n\t};\r\n}\r\n","const identity = ( arg ) => arg;\r\n\r\n/**\r\n * Migrates an individual item inside the `preferences` object for a package's store.\r\n *\r\n * Previously, some packages had individual 'preferences' of any data type, and many used\r\n * complex nested data structures. For example:\r\n * ```js\r\n * {\r\n *     'core/edit-post': {\r\n *         preferences: {\r\n *             panels: {\r\n *                 publish: {\r\n *                     opened: true,\r\n *                     enabled: true,\r\n *                 }\r\n *             },\r\n *             // ...other preferences.\r\n *         },\r\n *     },\r\n * }\r\n *\r\n * This function supports moving an individual preference like 'panels' above into the\r\n * preferences package data structure.\r\n *\r\n * It supports moving a preference to a particular scope in the preferences store and\r\n * optionally converting the data using a `convert` function.\r\n *\r\n * ```\r\n *\r\n * @param {Object}    state        The original state.\r\n * @param {Object}    migrate      An options object that contains details of the migration.\r\n * @param {string}    migrate.from The name of the store to migrate from.\r\n * @param {string}    migrate.to   The scope in the preferences store to migrate to.\r\n * @param {string}    key          The key in the preferences object to migrate.\r\n * @param {?Function} convert      A function that converts preferences from one format to another.\r\n */\r\nexport default function moveIndividualPreferenceToPreferences(\r\n\tstate,\r\n\t{ from: sourceStoreName, to: scope },\r\n\tkey,\r\n\tconvert = identity\r\n) {\r\n\tconst preferencesStoreName = 'core/preferences';\r\n\tconst sourcePreference = state?.[ sourceStoreName ]?.preferences?.[ key ];\r\n\r\n\t// There's nothing to migrate, exit early.\r\n\tif ( sourcePreference === undefined ) {\r\n\t\treturn state;\r\n\t}\r\n\r\n\tconst targetPreference =\r\n\t\tstate?.[ preferencesStoreName ]?.preferences?.[ scope ]?.[ key ];\r\n\r\n\t// There's existing data at the target, so don't overwrite it, exit early.\r\n\tif ( targetPreference ) {\r\n\t\treturn state;\r\n\t}\r\n\r\n\tconst otherScopes = state?.[ preferencesStoreName ]?.preferences;\r\n\tconst otherPreferences =\r\n\t\tstate?.[ preferencesStoreName ]?.preferences?.[ scope ];\r\n\r\n\tconst otherSourceState = state?.[ sourceStoreName ];\r\n\tconst allSourcePreferences = state?.[ sourceStoreName ]?.preferences;\r\n\r\n\t// Pass an object with the key and value as this allows the convert\r\n\t// function to convert to a data structure that has different keys.\r\n\tconst convertedPreferences = convert( { [ key ]: sourcePreference } );\r\n\r\n\treturn {\r\n\t\t...state,\r\n\t\t[ preferencesStoreName ]: {\r\n\t\t\tpreferences: {\r\n\t\t\t\t...otherScopes,\r\n\t\t\t\t[ scope ]: {\r\n\t\t\t\t\t...otherPreferences,\r\n\t\t\t\t\t...convertedPreferences,\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t},\r\n\t\t[ sourceStoreName ]: {\r\n\t\t\t...otherSourceState,\r\n\t\t\tpreferences: {\r\n\t\t\t\t...allSourcePreferences,\r\n\t\t\t\t[ key ]: undefined,\r\n\t\t\t},\r\n\t\t},\r\n\t};\r\n}\r\n","/**\r\n * Convert the post editor's panels state from:\r\n * ```\r\n * {\r\n *     panels: {\r\n *         tags: {\r\n *             enabled: true,\r\n *             opened: true,\r\n *         },\r\n *         permalinks: {\r\n *             enabled: false,\r\n *             opened: false,\r\n *         },\r\n *     },\r\n * }\r\n * ```\r\n *\r\n * to a new, more concise data structure:\r\n * {\r\n *     inactivePanels: [\r\n *         'permalinks',\r\n *     ],\r\n *     openPanels: [\r\n *         'tags',\r\n *     ],\r\n * }\r\n *\r\n * @param {Object} preferences A preferences object.\r\n *\r\n * @return {Object} The converted data.\r\n */\r\nexport default function convertEditPostPanels( preferences ) {\r\n\tconst panels = preferences?.panels ?? {};\r\n\treturn Object.keys( panels ).reduce(\r\n\t\t( convertedData, panelName ) => {\r\n\t\t\tconst panel = panels[ panelName ];\r\n\r\n\t\t\tif ( panel?.enabled === false ) {\r\n\t\t\t\tconvertedData.inactivePanels.push( panelName );\r\n\t\t\t}\r\n\r\n\t\t\tif ( panel?.opened === true ) {\r\n\t\t\t\tconvertedData.openPanels.push( panelName );\r\n\t\t\t}\r\n\r\n\t\t\treturn convertedData;\r\n\t\t},\r\n\t\t{ inactivePanels: [], openPanels: [] }\r\n\t);\r\n}\r\n","/**\n * Internal dependencies\n */\nimport moveFeaturePreferences from './move-feature-preferences';\nimport moveThirdPartyFeaturePreferences from './move-third-party-feature-preferences';\nimport moveIndividualPreference from './move-individual-preference';\nimport moveInterfaceEnableItems from './move-interface-enable-items';\nimport convertEditPostPanels from './convert-edit-post-panels';\n\n/**\n * Gets the legacy local storage data for a given user.\n *\n * @param {string | number} userId The user id.\n *\n * @return {Object | null} The local storage data.\n */\nfunction getLegacyData( userId ) {\n\tconst key = `WP_DATA_USER_${ userId }`;\n\tconst unparsedData = window.localStorage.getItem( key );\n\treturn JSON.parse( unparsedData );\n}\n\n/**\n * Converts data from the old `@wordpress/data` package format.\n *\n * @param {Object | null | undefined} data The legacy data in its original format.\n *\n * @return {Object | undefined} The converted data or `undefined` if there was\n *                              nothing to convert.\n */\nexport function convertLegacyData( data ) {\n\tif ( ! data ) {\n\t\treturn;\n\t}\n\n\t// Move boolean feature preferences from each editor into the\n\t// preferences store data structure.\n\tdata = moveFeaturePreferences( data, 'core/edit-widgets' );\n\tdata = moveFeaturePreferences( data, 'core/customize-widgets' );\n\tdata = moveFeaturePreferences( data, 'core/edit-post' );\n\tdata = moveFeaturePreferences( data, 'core/edit-site' );\n\n\t// Move third party boolean feature preferences from the interface package\n\t// to the preferences store data structure.\n\tdata = moveThirdPartyFeaturePreferences( data );\n\n\t// Move and convert the interface store's `enableItems` data into the\n\t// preferences data structure.\n\tdata = moveInterfaceEnableItems( data );\n\n\t// Move individual ad-hoc preferences from various packages into the\n\t// preferences store data structure.\n\tdata = moveIndividualPreference(\n\t\tdata,\n\t\t{ from: 'core/edit-post', to: 'core/edit-post' },\n\t\t'hiddenBlockTypes'\n\t);\n\tdata = moveIndividualPreference(\n\t\tdata,\n\t\t{ from: 'core/edit-post', to: 'core/edit-post' },\n\t\t'editorMode'\n\t);\n\tdata = moveIndividualPreference(\n\t\tdata,\n\t\t{ from: 'core/edit-post', to: 'core/edit-post' },\n\t\t'panels',\n\t\tconvertEditPostPanels\n\t);\n\tdata = moveIndividualPreference(\n\t\tdata,\n\t\t{ from: 'core/editor', to: 'core' },\n\t\t'isPublishSidebarEnabled'\n\t);\n\tdata = moveIndividualPreference(\n\t\tdata,\n\t\t{ from: 'core/edit-post', to: 'core' },\n\t\t'isPublishSidebarEnabled'\n\t);\n\tdata = moveIndividualPreference(\n\t\tdata,\n\t\t{ from: 'core/edit-site', to: 'core/edit-site' },\n\t\t'editorMode'\n\t);\n\n\t// The new system is only concerned with persisting\n\t// 'core/preferences' preferences reducer, so only return that.\n\treturn data?.[ 'core/preferences' ]?.preferences;\n}\n\n/**\n * Gets the legacy local storage data for the given user and returns the\n * data converted to the new format.\n *\n * @param {string | number} userId The user id.\n *\n * @return {Object | undefined} The converted data or undefined if no local\n *                              storage data could be found.\n */\nexport default function convertLegacyLocalStorageData( userId ) {\n\tconst data = getLegacyData( userId );\n\treturn convertLegacyData( data );\n}\n","/**\r\n * Migrates interface 'enableItems' data to the preferences store.\r\n *\r\n * The interface package stores this data in this format:\r\n * ```js\r\n * {\r\n *     enableItems: {\r\n *         singleEnableItems: {\r\n * \t           complementaryArea: {\r\n *                 'core/edit-post': 'edit-post/document',\r\n *                 'core/edit-site': 'edit-site/global-styles',\r\n *             }\r\n *         },\r\n *         multipleEnableItems: {\r\n *             pinnedItems: {\r\n *                 'core/edit-post': {\r\n *                     'plugin-1': true,\r\n *                 },\r\n *                 'core/edit-site': {\r\n *                     'plugin-2': true,\r\n *                 },\r\n *             },\r\n *         }\r\n *     }\r\n * }\r\n * ```\r\n *\r\n * and it should be converted it to:\r\n * ```js\r\n * {\r\n *     'core/edit-post': {\r\n *         complementaryArea: 'edit-post/document',\r\n *         pinnedItems: {\r\n *             'plugin-1': true,\r\n *         },\r\n *     },\r\n *     'core/edit-site': {\r\n *         complementaryArea: 'edit-site/global-styles',\r\n *         pinnedItems: {\r\n *             'plugin-2': true,\r\n *         },\r\n *     },\r\n * }\r\n * ```\r\n *\r\n * @param {Object} state The local storage state.\r\n */\r\nexport default function moveInterfaceEnableItems( state ) {\r\n\tconst interfaceStoreName = 'core/interface';\r\n\tconst preferencesStoreName = 'core/preferences';\r\n\tconst sourceEnableItems = state?.[ interfaceStoreName ]?.enableItems;\r\n\r\n\t// There's nothing to migrate, exit early.\r\n\tif ( ! sourceEnableItems ) {\r\n\t\treturn state;\r\n\t}\r\n\r\n\tconst allPreferences = state?.[ preferencesStoreName ]?.preferences ?? {};\r\n\r\n\t// First convert complementaryAreas into the right format.\r\n\t// Use the existing preferences as the accumulator so that the data is\r\n\t// merged.\r\n\tconst sourceComplementaryAreas =\r\n\t\tsourceEnableItems?.singleEnableItems?.complementaryArea ?? {};\r\n\r\n\tconst preferencesWithConvertedComplementaryAreas = Object.keys(\r\n\t\tsourceComplementaryAreas\r\n\t).reduce( ( accumulator, scope ) => {\r\n\t\tconst data = sourceComplementaryAreas[ scope ];\r\n\r\n\t\t// Don't overwrite any existing data in the preferences store.\r\n\t\tif ( accumulator?.[ scope ]?.complementaryArea ) {\r\n\t\t\treturn accumulator;\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\t...accumulator,\r\n\t\t\t[ scope ]: {\r\n\t\t\t\t...accumulator[ scope ],\r\n\t\t\t\tcomplementaryArea: data,\r\n\t\t\t},\r\n\t\t};\r\n\t}, allPreferences );\r\n\r\n\t// Next feed the converted complementary areas back into a reducer that\r\n\t// converts the pinned items, resulting in the fully migrated data.\r\n\tconst sourcePinnedItems =\r\n\t\tsourceEnableItems?.multipleEnableItems?.pinnedItems ?? {};\r\n\tconst allConvertedData = Object.keys( sourcePinnedItems ).reduce(\r\n\t\t( accumulator, scope ) => {\r\n\t\t\tconst data = sourcePinnedItems[ scope ];\r\n\t\t\t// Don't overwrite any existing data in the preferences store.\r\n\t\t\tif ( accumulator?.[ scope ]?.pinnedItems ) {\r\n\t\t\t\treturn accumulator;\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\t...accumulator,\r\n\t\t\t\t[ scope ]: {\r\n\t\t\t\t\t...accumulator[ scope ],\r\n\t\t\t\t\tpinnedItems: data,\r\n\t\t\t\t},\r\n\t\t\t};\r\n\t\t},\r\n\t\tpreferencesWithConvertedComplementaryAreas\r\n\t);\r\n\r\n\tconst otherInterfaceItems = state[ interfaceStoreName ];\r\n\r\n\treturn {\r\n\t\t...state,\r\n\t\t[ preferencesStoreName ]: {\r\n\t\t\tpreferences: allConvertedData,\r\n\t\t},\r\n\t\t[ interfaceStoreName ]: {\r\n\t\t\t...otherInterfaceItems,\r\n\t\t\tenableItems: undefined,\r\n\t\t},\r\n\t};\r\n}\r\n","/**\r\n * The interface package previously had a public API that could be used by\r\n * plugins to set persisted boolean 'feature' preferences.\r\n *\r\n * While usage was likely non-existent or very small, this function ensures\r\n * those are migrated to the preferences data structure. The interface\r\n * package's APIs have now been deprecated and use the preferences store.\r\n *\r\n * This will convert data that looks like this:\r\n * ```js\r\n * {\r\n *     'core/interface': {\r\n *         preferences: {\r\n *             features: {\r\n *                 'my-plugin': {\r\n *                     myPluginFeature: true\r\n *                 }\r\n *             }\r\n *         }\r\n *     }\r\n * }\r\n * ```\r\n *\r\n * To this:\r\n * ```js\r\n *  * {\r\n *     'core/preferences': {\r\n *         preferences: {\r\n *             'my-plugin': {\r\n *                 myPluginFeature: true\r\n *             }\r\n *         }\r\n *     }\r\n * }\r\n * ```\r\n *\r\n * @param {Object} state The local storage state\r\n *\r\n * @return {Object} The state with third party preferences moved to the\r\n *                  preferences data structure.\r\n */\r\nexport default function moveThirdPartyFeaturePreferencesToPreferences( state ) {\r\n\tconst interfaceStoreName = 'core/interface';\r\n\tconst preferencesStoreName = 'core/preferences';\r\n\r\n\tconst interfaceScopes =\r\n\t\tstate?.[ interfaceStoreName ]?.preferences?.features;\r\n\tconst interfaceScopeKeys = interfaceScopes\r\n\t\t? Object.keys( interfaceScopes )\r\n\t\t: [];\r\n\r\n\tif ( ! interfaceScopeKeys?.length ) {\r\n\t\treturn state;\r\n\t}\r\n\r\n\treturn interfaceScopeKeys.reduce( function ( convertedState, scope ) {\r\n\t\tif ( scope.startsWith( 'core' ) ) {\r\n\t\t\treturn convertedState;\r\n\t\t}\r\n\r\n\t\tconst featuresToMigrate = interfaceScopes?.[ scope ];\r\n\t\tif ( ! featuresToMigrate ) {\r\n\t\t\treturn convertedState;\r\n\t\t}\r\n\r\n\t\tconst existingMigratedData =\r\n\t\t\tconvertedState?.[ preferencesStoreName ]?.preferences?.[ scope ];\r\n\r\n\t\tif ( existingMigratedData ) {\r\n\t\t\treturn convertedState;\r\n\t\t}\r\n\r\n\t\tconst otherPreferencesScopes =\r\n\t\t\tconvertedState?.[ preferencesStoreName ]?.preferences;\r\n\t\tconst otherInterfaceState = convertedState?.[ interfaceStoreName ];\r\n\t\tconst otherInterfaceScopes =\r\n\t\t\tconvertedState?.[ interfaceStoreName ]?.preferences?.features;\r\n\r\n\t\treturn {\r\n\t\t\t...convertedState,\r\n\t\t\t[ preferencesStoreName ]: {\r\n\t\t\t\tpreferences: {\r\n\t\t\t\t\t...otherPreferencesScopes,\r\n\t\t\t\t\t[ scope ]: featuresToMigrate,\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t\t[ interfaceStoreName ]: {\r\n\t\t\t\t...otherInterfaceState,\r\n\t\t\t\tpreferences: {\r\n\t\t\t\t\tfeatures: {\r\n\t\t\t\t\t\t...otherInterfaceScopes,\r\n\t\t\t\t\t\t[ scope ]: undefined,\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t};\r\n\t}, state );\r\n}\r\n","/**\r\n * Internal dependencies\r\n */\r\nimport convertComplementaryAreas from './convert-complementary-areas';\r\nimport convertEditorSettings from './convert-editor-settings';\r\n\r\nexport default function convertPreferencesPackageData( data ) {\r\n\tlet newData = convertComplementaryAreas( data );\r\n\tnewData = convertEditorSettings( newData );\r\n\treturn newData;\r\n}\r\n","export default function convertComplementaryAreas( state ) {\r\n\treturn Object.keys( state ).reduce( ( stateAccumulator, scope ) => {\r\n\t\tconst scopeData = state[ scope ];\r\n\r\n\t\t// If a complementary area is truthy, convert it to the `isComplementaryAreaVisible` boolean.\r\n\t\tif ( scopeData?.complementaryArea ) {\r\n\t\t\tconst updatedScopeData = { ...scopeData };\r\n\t\t\tdelete updatedScopeData.complementaryArea;\r\n\t\t\tupdatedScopeData.isComplementaryAreaVisible = true;\r\n\t\t\tstateAccumulator[ scope ] = updatedScopeData;\r\n\t\t\treturn stateAccumulator;\r\n\t\t}\r\n\r\n\t\treturn stateAccumulator;\r\n\t}, state );\r\n}\r\n","/**\n * Internal dependencies\n */\n\nexport default function convertEditorSettings( data ) {\n\tlet newData = data;\n\tconst settingsToMoveToCore = [\n\t\t'allowRightClickOverrides',\n\t\t'distractionFree',\n\t\t'editorMode',\n\t\t'fixedToolbar',\n\t\t'focusMode',\n\t\t'hiddenBlockTypes',\n\t\t'inactivePanels',\n\t\t'keepCaretInsideBlock',\n\t\t'mostUsedBlocks',\n\t\t'openPanels',\n\t\t'showBlockBreadcrumbs',\n\t\t'showIconLabels',\n\t\t'showListViewByDefault',\n\t\t'isPublishSidebarEnabled',\n\t];\n\n\tsettingsToMoveToCore.forEach( ( setting ) => {\n\t\tif ( data?.[ 'core/edit-post' ]?.[ setting ] !== undefined ) {\n\t\t\tnewData = {\n\t\t\t\t...newData,\n\t\t\t\tcore: {\n\t\t\t\t\t...newData?.core,\n\t\t\t\t\t[ setting ]: data[ 'core/edit-post' ][ setting ],\n\t\t\t\t},\n\t\t\t};\n\t\t\tdelete newData[ 'core/edit-post' ][ setting ];\n\t\t}\n\n\t\tif ( data?.[ 'core/edit-site' ]?.[ setting ] !== undefined ) {\n\t\t\tdelete newData[ 'core/edit-site' ][ setting ];\n\t\t}\n\t} );\n\n\tif ( Object.keys( newData?.[ 'core/edit-post' ] ?? {} )?.length === 0 ) {\n\t\tdelete newData[ 'core/edit-post' ];\n\t}\n\n\tif ( Object.keys( newData?.[ 'core/edit-site' ] ?? {} )?.length === 0 ) {\n\t\tdelete newData[ 'core/edit-site' ];\n\t}\n\n\treturn newData;\n}\n","/**\r\n * Internal dependencies\r\n */\r\nimport create from './create';\r\nimport convertLegacyLocalStorageData from './migrations/legacy-local-storage-data';\r\nimport convertPreferencesPackageData from './migrations/preferences-package-data';\r\n\r\nexport { create };\r\n\r\n/**\r\n * Creates the persistence layer with preloaded data.\r\n *\r\n * It prioritizes any data from the server, but falls back first to localStorage\r\n * restore data, and then to any legacy data.\r\n *\r\n * This function is used internally by WordPress in an inline script, so\r\n * prefixed with `__unstable`.\r\n *\r\n * @param {Object} serverData Preferences data preloaded from the server.\r\n * @param {string} userId     The user id.\r\n *\r\n * @return {Object} The persistence layer initialized with the preloaded data.\r\n */\r\nexport function __unstableCreatePersistenceLayer( serverData, userId ) {\r\n\tconst localStorageRestoreKey = `WP_PREFERENCES_USER_${ userId }`;\r\n\tconst localData = JSON.parse(\r\n\t\twindow.localStorage.getItem( localStorageRestoreKey )\r\n\t);\r\n\r\n\t// Date parse returns NaN for invalid input. Coerce anything invalid\r\n\t// into a conveniently comparable zero.\r\n\tconst serverModified =\r\n\t\tDate.parse( serverData && serverData._modified ) || 0;\r\n\tconst localModified = Date.parse( localData && localData._modified ) || 0;\r\n\r\n\tlet preloadedData;\r\n\tif ( serverData && serverModified >= localModified ) {\r\n\t\tpreloadedData = convertPreferencesPackageData( serverData );\r\n\t} else if ( localData ) {\r\n\t\tpreloadedData = convertPreferencesPackageData( localData );\r\n\t} else {\r\n\t\t// Check if there is data in the legacy format from the old persistence system.\r\n\t\tpreloadedData = convertLegacyLocalStorageData( userId );\r\n\t}\r\n\r\n\treturn create( {\r\n\t\tpreloadedData,\r\n\t\tlocalStorageRestoreKey,\r\n\t} );\r\n}\r\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","window","EMPTY_OBJECT","localStorage","create","preloadedData","localStorageRestoreKey","requestDebounceMS","cache","debouncedApiFetch","func","delayMS","timeoutId","activePromise","async","args","clearTimeout","Promise","resolve","reject","setTimeout","then","thenArgs","catch","error","finally","debounceAsync","apiFetch","user","path","serverData","meta","persisted_preferences","localData","JSON","parse","getItem","serverTimestamp","Date","_modified","localTimestamp","set","newData","dataWithTimestamp","toISOString","setItem","stringify","method","keepalive","data","moveFeaturePreferences","state","sourceStoreName","preferencesStoreName","interfaceStoreName","interfaceFeatures","preferences","features","sourceFeatures","featuresToMigrate","existingPreferences","updatedInterfaceState","updatedSourceState","otherInterfaceState","otherInterfaceScopes","undefined","otherSourceState","sourcePreferences","identity","arg","moveIndividualPreferenceToPreferences","from","to","scope","convert","sourcePreference","targetPreference","otherScopes","otherPreferences","allSourcePreferences","convertedPreferences","convertEditPostPanels","_preferences$panels","panels","keys","reduce","convertedData","panelName","panel","enabled","inactivePanels","push","opened","openPanels","convertLegacyLocalStorageData","userId","unparsedData","getLegacyData","moveIndividualPreference","_state$preferencesSto","_sourceEnableItems$si","_sourceEnableItems$mu","sourceEnableItems","enableItems","allPreferences","sourceComplementaryAreas","singleEnableItems","complementaryArea","preferencesWithConvertedComplementaryAreas","accumulator","sourcePinnedItems","multipleEnableItems","pinnedItems","allConvertedData","otherInterfaceItems","moveInterfaceEnableItems","interfaceScopes","interfaceScopeKeys","length","convertedState","startsWith","existingMigratedData","otherPreferencesScopes","moveThirdPartyFeaturePreferences","convertLegacyData","convertPreferencesPackageData","stateAccumulator","scopeData","updatedScopeData","isComplementaryAreaVisible","_newData$coreEditPo","_newData$coreEditSi","forEach","setting","core","convertEditorSettings","__unstableCreatePersistenceLayer","serverModified","localModified"],"sourceRoot":""}