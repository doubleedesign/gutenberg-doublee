{"version":3,"file":"./build/wordcount/index.min.js","mappings":"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","sources":["webpack://wp/webpack/bootstrap","webpack://wp/webpack/runtime/define property getters","webpack://wp/webpack/runtime/hasOwnProperty shorthand","webpack://wp/webpack/runtime/make namespace object","../../packages/wordcount/src/defaultSettings.js","../../packages/wordcount/src/stripTags.js","../../packages/wordcount/src/transposeAstralsToCountableChar.js","../../packages/wordcount/src/stripHTMLEntities.js","../../packages/wordcount/src/stripConnectors.js","../../packages/wordcount/src/stripRemovables.js","../../packages/wordcount/src/stripHTMLComments.js","../../packages/wordcount/src/stripShortcodes.js","../../packages/wordcount/src/stripSpaces.js","../../packages/wordcount/src/transposeHTMLEntitiesToCountableChars.js","../../packages/wordcount/src/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/** @typedef {import('./index').WPWordCountStrategy} WPWordCountStrategy */\r\n\r\n/** @typedef {Partial<{type: WPWordCountStrategy, shortcodes: string[]}>} WPWordCountL10n */\r\n\r\n/**\r\n * @typedef WPWordCountSettingsFields\r\n * @property {RegExp}              HTMLRegExp                        Regular expression that matches HTML tags\r\n * @property {RegExp}              HTMLcommentRegExp                 Regular expression that matches HTML comments\r\n * @property {RegExp}              spaceRegExp                       Regular expression that matches spaces in HTML\r\n * @property {RegExp}              HTMLEntityRegExp                  Regular expression that matches HTML entities\r\n * @property {RegExp}              connectorRegExp                   Regular expression that matches word connectors, like em-dash\r\n * @property {RegExp}              removeRegExp                      Regular expression that matches various characters to be removed when counting\r\n * @property {RegExp}              astralRegExp                      Regular expression that matches astral UTF-16 code points\r\n * @property {RegExp}              wordsRegExp                       Regular expression that matches words\r\n * @property {RegExp}              characters_excluding_spacesRegExp Regular expression that matches characters excluding spaces\r\n * @property {RegExp}              characters_including_spacesRegExp Regular expression that matches characters including spaces\r\n * @property {RegExp}              shortcodesRegExp                  Regular expression that matches WordPress shortcodes\r\n * @property {string[]}            shortcodes                        List of all shortcodes\r\n * @property {WPWordCountStrategy} type                              Describes what and how are we counting\r\n * @property {WPWordCountL10n}     l10n                              Object with human translations\r\n */\r\n\r\n/**\r\n * Lower-level settings for word counting that can be overridden.\r\n *\r\n * @typedef {Partial<WPWordCountSettingsFields>} WPWordCountUserSettings\r\n */\r\n\r\n// Disable reason: JSDoc linter doesn't seem to parse the union (`&`) correctly: https://github.com/jsdoc/jsdoc/issues/1285\r\n/* eslint-disable jsdoc/valid-types */\r\n/**\r\n * Word counting settings that include non-optional values we set if missing\r\n *\r\n * @typedef {WPWordCountUserSettings & typeof defaultSettings} WPWordCountDefaultSettings\r\n */\r\n/* eslint-enable jsdoc/valid-types */\r\n\r\nexport const defaultSettings = {\r\n\tHTMLRegExp: /<\\/?[a-z][^>]*?>/gi,\r\n\tHTMLcommentRegExp: /<!--[\\s\\S]*?-->/g,\r\n\tspaceRegExp: /&nbsp;|&#160;/gi,\r\n\tHTMLEntityRegExp: /&\\S+?;/g,\r\n\r\n\t// \\u2014 = em-dash.\r\n\tconnectorRegExp: /--|\\u2014/g,\r\n\r\n\t// Characters to be removed from input text.\r\n\tremoveRegExp: new RegExp(\r\n\t\t[\r\n\t\t\t'[',\r\n\r\n\t\t\t// Basic Latin (extract)\r\n\t\t\t'\\u0021-\\u002F\\u003A-\\u0040\\u005B-\\u0060\\u007B-\\u007E',\r\n\r\n\t\t\t// Latin-1 Supplement (extract)\r\n\t\t\t'\\u0080-\\u00BF\\u00D7\\u00F7',\r\n\r\n\t\t\t/*\r\n\t\t\t * The following range consists of:\r\n\t\t\t * General Punctuation\r\n\t\t\t * Superscripts and Subscripts\r\n\t\t\t * Currency Symbols\r\n\t\t\t * Combining Diacritical Marks for Symbols\r\n\t\t\t * Letterlike Symbols\r\n\t\t\t * Number Forms\r\n\t\t\t * Arrows\r\n\t\t\t * Mathematical Operators\r\n\t\t\t * Miscellaneous Technical\r\n\t\t\t * Control Pictures\r\n\t\t\t * Optical Character Recognition\r\n\t\t\t * Enclosed Alphanumerics\r\n\t\t\t * Box Drawing\r\n\t\t\t * Block Elements\r\n\t\t\t * Geometric Shapes\r\n\t\t\t * Miscellaneous Symbols\r\n\t\t\t * Dingbats\r\n\t\t\t * Miscellaneous Mathematical Symbols-A\r\n\t\t\t * Supplemental Arrows-A\r\n\t\t\t * Braille Patterns\r\n\t\t\t * Supplemental Arrows-B\r\n\t\t\t * Miscellaneous Mathematical Symbols-B\r\n\t\t\t * Supplemental Mathematical Operators\r\n\t\t\t * Miscellaneous Symbols and Arrows\r\n\t\t\t */\r\n\t\t\t'\\u2000-\\u2BFF',\r\n\r\n\t\t\t// Supplemental Punctuation.\r\n\t\t\t'\\u2E00-\\u2E7F',\r\n\t\t\t']',\r\n\t\t].join( '' ),\r\n\t\t'g'\r\n\t),\r\n\r\n\t// Remove UTF-16 surrogate points, see https://en.wikipedia.org/wiki/UTF-16#U.2BD800_to_U.2BDFFF\r\n\tastralRegExp: /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g,\r\n\twordsRegExp: /\\S\\s+/g,\r\n\tcharacters_excluding_spacesRegExp: /\\S/g,\r\n\r\n\t/*\r\n\t * Match anything that is not a formatting character, excluding:\r\n\t * \\f = form feed\r\n\t * \\n = new line\r\n\t * \\r = carriage return\r\n\t * \\t = tab\r\n\t * \\v = vertical tab\r\n\t * \\u00AD = soft hyphen\r\n\t * \\u2028 = line separator\r\n\t * \\u2029 = paragraph separator\r\n\t */\r\n\tcharacters_including_spacesRegExp: /[^\\f\\n\\r\\t\\v\\u00AD\\u2028\\u2029]/g,\r\n\tl10n: {\r\n\t\ttype: 'words',\r\n\t},\r\n};\r\n","/**\r\n * Replaces items matched in the regex with new line\r\n *\r\n * @param {import('./index').WPWordCountSettings} settings The main settings object containing regular expressions\r\n * @param {string}                                text     The string being counted.\r\n *\r\n * @return {string} The manipulated text.\r\n */\r\nexport default function stripTags( settings, text ) {\r\n\treturn text.replace( settings.HTMLRegExp, '\\n' );\r\n}\r\n","/**\r\n * Replaces items matched in the regex with character.\r\n *\r\n * @param {import('./index').WPWordCountSettings} settings The main settings object containing regular expressions\r\n * @param {string}                                text     The string being counted.\r\n *\r\n * @return {string} The manipulated text.\r\n */\r\nexport default function transposeAstralsToCountableChar( settings, text ) {\r\n\treturn text.replace( settings.astralRegExp, 'a' );\r\n}\r\n","/**\r\n * Removes items matched in the regex.\r\n *\r\n * @param {import('./index').WPWordCountSettings} settings The main settings object containing regular expressions\r\n * @param {string}                                text     The string being counted.\r\n *\r\n * @return {string} The manipulated text.\r\n */\r\nexport default function stripHTMLEntities( settings, text ) {\r\n\treturn text.replace( settings.HTMLEntityRegExp, '' );\r\n}\r\n","/**\r\n * Replaces items matched in the regex with spaces.\r\n *\r\n * @param {import('./index').WPWordCountSettings} settings The main settings object containing regular expressions\r\n * @param {string}                                text     The string being counted.\r\n *\r\n * @return {string} The manipulated text.\r\n */\r\nexport default function stripConnectors( settings, text ) {\r\n\treturn text.replace( settings.connectorRegExp, ' ' );\r\n}\r\n","/**\r\n * Removes items matched in the regex.\r\n *\r\n * @param {import('./index').WPWordCountSettings} settings The main settings object containing regular expressions\r\n * @param {string}                                text     The string being counted.\r\n *\r\n * @return {string} The manipulated text.\r\n */\r\nexport default function stripRemovables( settings, text ) {\r\n\treturn text.replace( settings.removeRegExp, '' );\r\n}\r\n","/**\r\n * Removes items matched in the regex.\r\n *\r\n * @param {import('./index').WPWordCountSettings} settings The main settings object containing regular expressions\r\n * @param {string}                                text     The string being counted.\r\n *\r\n * @return {string} The manipulated text.\r\n */\r\nexport default function stripHTMLComments( settings, text ) {\r\n\treturn text.replace( settings.HTMLcommentRegExp, '' );\r\n}\r\n","/**\r\n * Replaces items matched in the regex with a new line.\r\n *\r\n * @param {import('./index').WPWordCountSettings} settings The main settings object containing regular expressions\r\n * @param {string}                                text     The string being counted.\r\n *\r\n * @return {string} The manipulated text.\r\n */\r\nexport default function stripShortcodes( settings, text ) {\r\n\tif ( settings.shortcodesRegExp ) {\r\n\t\treturn text.replace( settings.shortcodesRegExp, '\\n' );\r\n\t}\r\n\treturn text;\r\n}\r\n","/**\r\n * Replaces items matched in the regex with spaces.\r\n *\r\n * @param {import('./index').WPWordCountSettings} settings The main settings object containing regular expressions\r\n * @param {string}                                text     The string being counted.\r\n *\r\n * @return {string} The manipulated text.\r\n */\r\nexport default function stripSpaces( settings, text ) {\r\n\treturn text.replace( settings.spaceRegExp, ' ' );\r\n}\r\n","/**\r\n * Replaces items matched in the regex with a single character.\r\n *\r\n * @param {import('./index').WPWordCountSettings} settings The main settings object containing regular expressions\r\n * @param {string}                                text     The string being counted.\r\n *\r\n * @return {string} The manipulated text.\r\n */\r\nexport default function transposeHTMLEntitiesToCountableChars(\r\n\tsettings,\r\n\ttext\r\n) {\r\n\treturn text.replace( settings.HTMLEntityRegExp, 'a' );\r\n}\r\n","/**\r\n * Internal dependencies\r\n */\r\nimport { defaultSettings } from './defaultSettings';\r\nimport stripTags from './stripTags';\r\nimport transposeAstralsToCountableChar from './transposeAstralsToCountableChar';\r\nimport stripHTMLEntities from './stripHTMLEntities';\r\nimport stripConnectors from './stripConnectors';\r\nimport stripRemovables from './stripRemovables';\r\nimport stripHTMLComments from './stripHTMLComments';\r\nimport stripShortcodes from './stripShortcodes';\r\nimport stripSpaces from './stripSpaces';\r\nimport transposeHTMLEntitiesToCountableChars from './transposeHTMLEntitiesToCountableChars';\r\n\r\n/**\r\n * @typedef {import('./defaultSettings').WPWordCountDefaultSettings}  WPWordCountSettings\r\n * @typedef {import('./defaultSettings').WPWordCountUserSettings}     WPWordCountUserSettings\r\n */\r\n\r\n/**\r\n * Possible ways of counting.\r\n *\r\n * @typedef {'words'|'characters_excluding_spaces'|'characters_including_spaces'} WPWordCountStrategy\r\n */\r\n\r\n/**\r\n * Private function to manage the settings.\r\n *\r\n * @param {WPWordCountStrategy}     type         The type of count to be done.\r\n * @param {WPWordCountUserSettings} userSettings Custom settings for the count.\r\n *\r\n * @return {WPWordCountSettings} The combined settings object to be used.\r\n */\r\nfunction loadSettings( type, userSettings ) {\r\n\tconst settings = Object.assign( {}, defaultSettings, userSettings );\r\n\r\n\tsettings.shortcodes = settings.l10n?.shortcodes ?? [];\r\n\r\n\tif ( settings.shortcodes && settings.shortcodes.length ) {\r\n\t\tsettings.shortcodesRegExp = new RegExp(\r\n\t\t\t'\\\\[\\\\/?(?:' + settings.shortcodes.join( '|' ) + ')[^\\\\]]*?\\\\]',\r\n\t\t\t'g'\r\n\t\t);\r\n\t}\r\n\r\n\tsettings.type = type;\r\n\r\n\tif (\r\n\t\tsettings.type !== 'characters_excluding_spaces' &&\r\n\t\tsettings.type !== 'characters_including_spaces'\r\n\t) {\r\n\t\tsettings.type = 'words';\r\n\t}\r\n\r\n\treturn settings;\r\n}\r\n\r\n/**\r\n * Count the words in text\r\n *\r\n * @param {string}              text     The text being processed\r\n * @param {RegExp}              regex    The regular expression pattern being matched\r\n * @param {WPWordCountSettings} settings Settings object containing regular expressions for each strip function\r\n *\r\n * @return {number} Count of words.\r\n */\r\nfunction countWords( text, regex, settings ) {\r\n\ttext = [\r\n\t\tstripTags.bind( null, settings ),\r\n\t\tstripHTMLComments.bind( null, settings ),\r\n\t\tstripShortcodes.bind( null, settings ),\r\n\t\tstripSpaces.bind( null, settings ),\r\n\t\tstripHTMLEntities.bind( null, settings ),\r\n\t\tstripConnectors.bind( null, settings ),\r\n\t\tstripRemovables.bind( null, settings ),\r\n\t].reduce( ( result, fn ) => fn( result ), text );\r\n\ttext = text + '\\n';\r\n\treturn text.match( regex )?.length ?? 0;\r\n}\r\n\r\n/**\r\n * Count the characters in text\r\n *\r\n * @param {string}              text     The text being processed\r\n * @param {RegExp}              regex    The regular expression pattern being matched\r\n * @param {WPWordCountSettings} settings Settings object containing regular expressions for each strip function\r\n *\r\n * @return {number} Count of characters.\r\n */\r\nfunction countCharacters( text, regex, settings ) {\r\n\ttext = [\r\n\t\tstripTags.bind( null, settings ),\r\n\t\tstripHTMLComments.bind( null, settings ),\r\n\t\tstripShortcodes.bind( null, settings ),\r\n\t\ttransposeAstralsToCountableChar.bind( null, settings ),\r\n\t\tstripSpaces.bind( null, settings ),\r\n\t\ttransposeHTMLEntitiesToCountableChars.bind( null, settings ),\r\n\t].reduce( ( result, fn ) => fn( result ), text );\r\n\ttext = text + '\\n';\r\n\treturn text.match( regex )?.length ?? 0;\r\n}\r\n\r\n/**\r\n * Count some words.\r\n *\r\n * @param {string}                  text         The text being processed\r\n * @param {WPWordCountStrategy}     type         The type of count. Accepts 'words', 'characters_excluding_spaces', or 'characters_including_spaces'.\r\n * @param {WPWordCountUserSettings} userSettings Custom settings object.\r\n *\r\n * @example\r\n * ```js\r\n * import { count } from '@wordpress/wordcount';\r\n * const numberOfWords = count( 'Words to count', 'words', {} )\r\n * ```\r\n *\r\n * @return {number} The word or character count.\r\n */\r\nexport function count( text, type, userSettings ) {\r\n\tconst settings = loadSettings( type, userSettings );\r\n\tlet matchRegExp;\r\n\tswitch ( settings.type ) {\r\n\t\tcase 'words':\r\n\t\t\tmatchRegExp = settings.wordsRegExp;\r\n\t\t\treturn countWords( text, matchRegExp, settings );\r\n\t\tcase 'characters_including_spaces':\r\n\t\t\tmatchRegExp = settings.characters_including_spacesRegExp;\r\n\t\t\treturn countCharacters( text, matchRegExp, settings );\r\n\t\tcase 'characters_excluding_spaces':\r\n\t\t\tmatchRegExp = settings.characters_excluding_spacesRegExp;\r\n\t\t\treturn countCharacters( text, matchRegExp, settings );\r\n\t\tdefault:\r\n\t\t\treturn 0;\r\n\t}\r\n}\r\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","defaultSettings","HTMLRegExp","HTMLcommentRegExp","spaceRegExp","HTMLEntityRegExp","connectorRegExp","removeRegExp","RegExp","join","astralRegExp","wordsRegExp","characters_excluding_spacesRegExp","characters_including_spacesRegExp","l10n","type","stripTags","settings","text","replace","transposeAstralsToCountableChar","stripHTMLEntities","stripConnectors","stripRemovables","stripHTMLComments","stripShortcodes","shortcodesRegExp","stripSpaces","transposeHTMLEntitiesToCountableChars","countCharacters","regex","_text$match$length2","bind","reduce","result","fn","match","length","count","userSettings","_settings$l10n$shortc","assign","shortcodes","loadSettings","matchRegExp","_text$match$length","countWords"],"sourceRoot":""}