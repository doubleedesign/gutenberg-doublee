{"version":3,"file":"./build/block-library/blocks/file/view.min.js","mappings":"mBAAA,MAAM,EAA+BA,OAAW,GAAiB,cC+C3DC,EAAwBC,IAC7B,IAAIC,EACJ,IACCA,EAAK,IAAIH,OAAOI,cAAeF,EAChC,CAAE,MAAQG,GACTF,OAAKG,CACN,CACA,OAAOH,CAAE,GC7CVI,EAAAA,EAAAA,OACC,YACA,CACCC,MAAO,CACN,iBAAIC,GACH,QDNET,OAAOU,UAAUC,UAAUC,QAAS,SAAY,GAKhDZ,OAAOU,UAAUC,UAAUC,QAAS,YAAe,GAMvDZ,OAAOU,UAAUC,UAAUC,QAAS,cAAiB,GACrDZ,OAAOU,UAAUG,gBACjBb,OAAOU,UAAUG,eAAiB,IAO7Bb,OAAOI,eAAiB,kBAAmBJ,UAE/CC,EAAqB,iBACrBA,EAAqB,eChBrB,IAGF,CAAEa,MAAM,G","sources":["webpack://wp/external window [\"wp\",\"interactivity\"]","webpack://wp/./packages/block-library/build-module/file/utils/@wordpress/block-library/src/file/utils/index.js","webpack://wp/./packages/block-library/build-module/file/@wordpress/block-library/src/file/view.js"],"sourcesContent":["const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"interactivity\"];","/**\r\n * Uses a combination of user agent matching and feature detection to determine whether\r\n * the current browser supports rendering PDFs inline.\r\n *\r\n * @return {boolean} Whether or not the browser supports inline PDFs.\r\n */\r\nexport const browserSupportsPdfs = () => {\r\n\t// Most mobile devices include \"Mobi\" in their UA.\r\n\tif ( window.navigator.userAgent.indexOf( 'Mobi' ) > -1 ) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\t// Android tablets are the noteable exception.\r\n\tif ( window.navigator.userAgent.indexOf( 'Android' ) > -1 ) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\t// iPad pretends to be a Mac.\r\n\tif (\r\n\t\twindow.navigator.userAgent.indexOf( 'Macintosh' ) > -1 &&\r\n\t\twindow.navigator.maxTouchPoints &&\r\n\t\twindow.navigator.maxTouchPoints > 2\r\n\t) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\t// IE only supports PDFs when there's an ActiveX object available for it.\r\n\tif (\r\n\t\t!! ( window.ActiveXObject || 'ActiveXObject' in window ) &&\r\n\t\t! (\r\n\t\t\tcreateActiveXObject( 'AcroPDF.PDF' ) ||\r\n\t\t\tcreateActiveXObject( 'PDF.PdfCtrl' )\r\n\t\t)\r\n\t) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn true;\r\n};\r\n\r\n/**\r\n * Helper function for creating ActiveX objects, catching any errors that are thrown\r\n * when it's generated.\r\n *\r\n * @param {string} type The name of the ActiveX object to create.\r\n * @return {window.ActiveXObject|undefined} The generated ActiveXObject, or null if it failed.\r\n */\r\nconst createActiveXObject = ( type ) => {\r\n\tlet ax;\r\n\ttry {\r\n\t\tax = new window.ActiveXObject( type );\r\n\t} catch ( e ) {\r\n\t\tax = undefined;\r\n\t}\r\n\treturn ax;\r\n};\r\n","/**\n * WordPress dependencies\n */\nimport { store } from '@wordpress/interactivity';\n/**\n * Internal dependencies\n */\nimport { browserSupportsPdfs } from './utils';\n\nstore(\n\t'core/file',\n\t{\n\t\tstate: {\n\t\t\tget hasPdfPreview() {\n\t\t\t\treturn browserSupportsPdfs();\n\t\t\t},\n\t\t},\n\t},\n\t{ lock: true }\n);\n"],"names":["window","createActiveXObject","type","ax","ActiveXObject","e","undefined","store","state","hasPdfPreview","navigator","userAgent","indexOf","maxTouchPoints","lock"],"sourceRoot":""}