{"version":3,"file":"./build/deprecated/index.min.js","mappings":"mBACA,IAAIA,EAAsB,CCA1BA,EAAwB,CAACC,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXF,EAAoBI,EAAEF,EAAYC,KAASH,EAAoBI,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDH,EAAwB,CAACS,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,I,4BCAlF,MAAM,EAA+BI,OAAW,GAAS,MCW5CC,EAASV,OAAOW,OAAQ,MA6BtB,SAASC,EAAYC,EAASC,EAAU,CAAC,GACvD,MAAM,MAAEC,EAAK,QAAEC,EAAO,YAAEC,EAAW,OAAEC,EAAM,KAAEC,EAAI,KAAEC,GAASN,EAYtDO,EAAW,GAAGR,kBATCE,EAAS,kBAAkBA,IAAW,KACpCC,EACnB,uBAHkBE,EAAU,SAASA,IAAY,iBAGIF,IACtD,MACuBC,EACtB,eAAeA,aAChB,KACiBE,EAAQ,SAASA,IAAU,KAC3BC,EAAQ,UAAUA,IAAU,KAI3CC,KAAWX,KAiBhBY,EAAAA,EAAAA,UAAU,aAAcT,EAASC,EAASO,GAG1CE,QAAQC,KAAMH,GAEdX,EAAQW,IAAY,EACrB,E","sources":["webpack://wp/webpack/bootstrap","webpack://wp/webpack/runtime/define property getters","webpack://wp/webpack/runtime/hasOwnProperty shorthand","webpack://wp/external window [\"wp\",\"hooks\"]","../../packages/deprecated/src/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"hooks\"];","/**\r\n * WordPress dependencies\r\n */\r\nimport { doAction } from '@wordpress/hooks';\r\n\r\n/**\r\n * Object map tracking messages which have been logged, for use in ensuring a\r\n * message is only logged once.\r\n *\r\n * @type {Record<string, true | undefined>}\r\n */\r\nexport const logged = Object.create( null );\r\n\r\n/**\r\n * Logs a message to notify developers about a deprecated feature.\r\n *\r\n * @param {string} feature               Name of the deprecated feature.\r\n * @param {Object} [options]             Personalisation options\r\n * @param {string} [options.since]       Version in which the feature was deprecated.\r\n * @param {string} [options.version]     Version in which the feature will be removed.\r\n * @param {string} [options.alternative] Feature to use instead\r\n * @param {string} [options.plugin]      Plugin name if it's a plugin feature\r\n * @param {string} [options.link]        Link to documentation\r\n * @param {string} [options.hint]        Additional message to help transition away from the deprecated feature.\r\n *\r\n * @example\r\n * ```js\r\n * import deprecated from '@wordpress/deprecated';\r\n *\r\n * deprecated( 'Eating meat', {\r\n * \tsince: '2019.01.01'\r\n * \tversion: '2020.01.01',\r\n * \talternative: 'vegetables',\r\n * \tplugin: 'the earth',\r\n * \thint: 'You may find it beneficial to transition gradually.',\r\n * } );\r\n *\r\n * // Logs: 'Eating meat is deprecated since version 2019.01.01 and will be removed from the earth in version 2020.01.01. Please use vegetables instead. Note: You may find it beneficial to transition gradually.'\r\n * ```\r\n */\r\nexport default function deprecated( feature, options = {} ) {\r\n\tconst { since, version, alternative, plugin, link, hint } = options;\r\n\r\n\tconst pluginMessage = plugin ? ` from ${ plugin }` : '';\r\n\tconst sinceMessage = since ? ` since version ${ since }` : '';\r\n\tconst versionMessage = version\r\n\t\t? ` and will be removed${ pluginMessage } in version ${ version }`\r\n\t\t: '';\r\n\tconst useInsteadMessage = alternative\r\n\t\t? ` Please use ${ alternative } instead.`\r\n\t\t: '';\r\n\tconst linkMessage = link ? ` See: ${ link }` : '';\r\n\tconst hintMessage = hint ? ` Note: ${ hint }` : '';\r\n\tconst message = `${ feature } is deprecated${ sinceMessage }${ versionMessage }.${ useInsteadMessage }${ linkMessage }${ hintMessage }`;\r\n\r\n\t// Skip if already logged.\r\n\tif ( message in logged ) {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * Fires whenever a deprecated feature is encountered\r\n\t *\r\n\t * @param {string}  feature             Name of the deprecated feature.\r\n\t * @param {?Object} options             Personalisation options\r\n\t * @param {string}  options.since       Version in which the feature was deprecated.\r\n\t * @param {?string} options.version     Version in which the feature will be removed.\r\n\t * @param {?string} options.alternative Feature to use instead\r\n\t * @param {?string} options.plugin      Plugin name if it's a plugin feature\r\n\t * @param {?string} options.link        Link to documentation\r\n\t * @param {?string} options.hint        Additional message to help transition away from the deprecated feature.\r\n\t * @param {?string} message             Message sent to console.warn\r\n\t */\r\n\tdoAction( 'deprecated', feature, options, message );\r\n\r\n\t// eslint-disable-next-line no-console\r\n\tconsole.warn( message );\r\n\r\n\tlogged[ message ] = true;\r\n}\r\n\r\n/** @typedef {import('utility-types').NonUndefined<Parameters<typeof deprecated>[1]>} DeprecatedOptions */\r\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","window","logged","create","deprecated","feature","options","since","version","alternative","plugin","link","hint","message","doAction","console","warn"],"sourceRoot":""}