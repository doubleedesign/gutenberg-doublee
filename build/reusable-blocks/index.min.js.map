{"version":3,"file":"./build/reusable-blocks/index.min.js","mappings":"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","sources":["webpack://wp/webpack/bootstrap","webpack://wp/webpack/runtime/define property getters","webpack://wp/webpack/runtime/hasOwnProperty shorthand","webpack://wp/webpack/runtime/make namespace object","webpack://wp/external window [\"wp\",\"data\"]","webpack://wp/external window [\"wp\",\"blockEditor\"]","webpack://wp/external window [\"wp\",\"blocks\"]","webpack://wp/external window [\"wp\",\"i18n\"]","../../packages/reusable-blocks/src/store/actions.js","../../packages/reusable-blocks/src/store/reducer.js","../../packages/reusable-blocks/src/store/selectors.js","../../packages/reusable-blocks/src/store/index.js","webpack://wp/external window \"React\"","webpack://wp/external window [\"wp\",\"element\"]","webpack://wp/external window [\"wp\",\"components\"]","webpack://wp/external window [\"wp\",\"primitives\"]","../../packages/icons/src/library/symbol.js","webpack://wp/external window [\"wp\",\"notices\"]","webpack://wp/external window [\"wp\",\"coreData\"]","webpack://wp/external window [\"wp\",\"privateApis\"]","../../packages/reusable-blocks/src/lock-unlock.js","../../packages/reusable-blocks/src/components/reusable-blocks-menu-items/reusable-block-convert-button.js","webpack://wp/external window [\"wp\",\"url\"]","../../packages/reusable-blocks/src/components/reusable-blocks-menu-items/reusable-blocks-manage-button.js","../../packages/reusable-blocks/src/components/reusable-blocks-menu-items/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"data\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"blockEditor\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"blocks\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"i18n\"];","/**\r\n * WordPress dependencies\r\n */\r\nimport { store as blockEditorStore } from '@wordpress/block-editor';\r\nimport {\r\n\tcreateBlock,\r\n\tisReusableBlock,\r\n\tparse,\r\n\tserialize,\r\n} from '@wordpress/blocks';\r\nimport { __ } from '@wordpress/i18n';\r\n\r\n/**\r\n * Returns a generator converting a reusable block into a static block.\r\n *\r\n * @param {string} clientId The client ID of the block to attach.\r\n */\r\nexport const __experimentalConvertBlockToStatic =\r\n\t( clientId ) =>\r\n\t( { registry } ) => {\r\n\t\tconst oldBlock = registry\r\n\t\t\t.select( blockEditorStore )\r\n\t\t\t.getBlock( clientId );\r\n\t\tconst reusableBlock = registry\r\n\t\t\t.select( 'core' )\r\n\t\t\t.getEditedEntityRecord(\r\n\t\t\t\t'postType',\r\n\t\t\t\t'wp_block',\r\n\t\t\t\toldBlock.attributes.ref\r\n\t\t\t);\r\n\r\n\t\tconst newBlocks = parse(\r\n\t\t\ttypeof reusableBlock.content === 'function'\r\n\t\t\t\t? reusableBlock.content( reusableBlock )\r\n\t\t\t\t: reusableBlock.content\r\n\t\t);\r\n\t\tregistry\r\n\t\t\t.dispatch( blockEditorStore )\r\n\t\t\t.replaceBlocks( oldBlock.clientId, newBlocks );\r\n\t};\r\n\r\n/**\r\n * Returns a generator converting one or more static blocks into a pattern.\r\n *\r\n * @param {string[]}             clientIds The client IDs of the block to detach.\r\n * @param {string}               title     Pattern title.\r\n * @param {undefined|'unsynced'} syncType  They way block is synced, current undefined (synced) and 'unsynced'.\r\n */\r\nexport const __experimentalConvertBlocksToReusable =\r\n\t( clientIds, title, syncType ) =>\r\n\tasync ( { registry, dispatch } ) => {\r\n\t\tconst meta =\r\n\t\t\tsyncType === 'unsynced'\r\n\t\t\t\t? {\r\n\t\t\t\t\t\twp_pattern_sync_status: syncType,\r\n\t\t\t\t  }\r\n\t\t\t\t: undefined;\r\n\r\n\t\tconst reusableBlock = {\r\n\t\t\ttitle: title || __( 'Untitled pattern block' ),\r\n\t\t\tcontent: serialize(\r\n\t\t\t\tregistry\r\n\t\t\t\t\t.select( blockEditorStore )\r\n\t\t\t\t\t.getBlocksByClientId( clientIds )\r\n\t\t\t),\r\n\t\t\tstatus: 'publish',\r\n\t\t\tmeta,\r\n\t\t};\r\n\r\n\t\tconst updatedRecord = await registry\r\n\t\t\t.dispatch( 'core' )\r\n\t\t\t.saveEntityRecord( 'postType', 'wp_block', reusableBlock );\r\n\r\n\t\tif ( syncType === 'unsynced' ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst newBlock = createBlock( 'core/block', {\r\n\t\t\tref: updatedRecord.id,\r\n\t\t} );\r\n\t\tregistry\r\n\t\t\t.dispatch( blockEditorStore )\r\n\t\t\t.replaceBlocks( clientIds, newBlock );\r\n\t\tdispatch.__experimentalSetEditingReusableBlock(\r\n\t\t\tnewBlock.clientId,\r\n\t\t\ttrue\r\n\t\t);\r\n\t};\r\n\r\n/**\r\n * Returns a generator deleting a reusable block.\r\n *\r\n * @param {string} id The ID of the reusable block to delete.\r\n */\r\nexport const __experimentalDeleteReusableBlock =\r\n\t( id ) =>\r\n\tasync ( { registry } ) => {\r\n\t\tconst reusableBlock = registry\r\n\t\t\t.select( 'core' )\r\n\t\t\t.getEditedEntityRecord( 'postType', 'wp_block', id );\r\n\r\n\t\t// Don't allow a reusable block with a temporary ID to be deleted.\r\n\t\tif ( ! reusableBlock ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Remove any other blocks that reference this reusable block.\r\n\t\tconst allBlocks = registry.select( blockEditorStore ).getBlocks();\r\n\t\tconst associatedBlocks = allBlocks.filter(\r\n\t\t\t( block ) => isReusableBlock( block ) && block.attributes.ref === id\r\n\t\t);\r\n\t\tconst associatedBlockClientIds = associatedBlocks.map(\r\n\t\t\t( block ) => block.clientId\r\n\t\t);\r\n\r\n\t\t// Remove the parsed block.\r\n\t\tif ( associatedBlockClientIds.length ) {\r\n\t\t\tregistry\r\n\t\t\t\t.dispatch( blockEditorStore )\r\n\t\t\t\t.removeBlocks( associatedBlockClientIds );\r\n\t\t}\r\n\r\n\t\tawait registry\r\n\t\t\t.dispatch( 'core' )\r\n\t\t\t.deleteEntityRecord( 'postType', 'wp_block', id );\r\n\t};\r\n\r\n/**\r\n * Returns an action descriptor for SET_EDITING_REUSABLE_BLOCK action.\r\n *\r\n * @param {string}  clientId  The clientID of the reusable block to target.\r\n * @param {boolean} isEditing Whether the block should be in editing state.\r\n * @return {Object} Action descriptor.\r\n */\r\nexport function __experimentalSetEditingReusableBlock( clientId, isEditing ) {\r\n\treturn {\r\n\t\ttype: 'SET_EDITING_REUSABLE_BLOCK',\r\n\t\tclientId,\r\n\t\tisEditing,\r\n\t};\r\n}\r\n","/**\r\n * WordPress dependencies\r\n */\r\nimport { combineReducers } from '@wordpress/data';\r\n\r\nexport function isEditingReusableBlock( state = {}, action ) {\r\n\tif ( action?.type === 'SET_EDITING_REUSABLE_BLOCK' ) {\r\n\t\treturn {\r\n\t\t\t...state,\r\n\t\t\t[ action.clientId ]: action.isEditing,\r\n\t\t};\r\n\t}\r\n\r\n\treturn state;\r\n}\r\n\r\nexport default combineReducers( {\r\n\tisEditingReusableBlock,\r\n} );\r\n","/**\r\n * Returns true if reusable block is in the editing state.\r\n *\r\n * @param {Object} state    Global application state.\r\n * @param {number} clientId the clientID of the block.\r\n * @return {boolean} Whether the reusable block is in the editing state.\r\n */\r\nexport function __experimentalIsEditingReusableBlock( state, clientId ) {\r\n\treturn state.isEditingReusableBlock[ clientId ];\r\n}\r\n","/**\r\n * WordPress dependencies\r\n */\r\nimport { createReduxStore, register } from '@wordpress/data';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport * as actions from './actions';\r\nimport reducer from './reducer';\r\nimport * as selectors from './selectors';\r\n\r\nconst STORE_NAME = 'core/reusable-blocks';\r\n\r\n/**\r\n * Store definition for the reusable blocks namespace.\r\n *\r\n * @see https://github.com/WordPress/gutenberg/blob/HEAD/packages/data/README.md#createReduxStore\r\n *\r\n * @type {Object}\r\n */\r\nexport const store = createReduxStore( STORE_NAME, {\r\n\tactions,\r\n\treducer,\r\n\tselectors,\r\n} );\r\n\r\nregister( store );\r\n","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"React\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"element\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"components\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"primitives\"];","/**\r\n * WordPress dependencies\r\n */\r\nimport { SVG, Path } from '@wordpress/primitives';\r\n\r\nconst symbol = (\r\n\t<SVG xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\r\n\t\t<Path d=\"M21.3 10.8l-5.6-5.6c-.7-.7-1.8-.7-2.5 0l-5.6 5.6c-.7.7-.7 1.8 0 2.5l5.6 5.6c.3.3.8.5 1.2.5s.9-.2 1.2-.5l5.6-5.6c.8-.7.8-1.9.1-2.5zm-1 1.4l-5.6 5.6c-.1.1-.3.1-.4 0l-5.6-5.6c-.1-.1-.1-.3 0-.4l5.6-5.6s.1-.1.2-.1.1 0 .2.1l5.6 5.6c.1.1.1.3 0 .4zm-16.6-.4L10 5.5l-1-1-6.3 6.3c-.7.7-.7 1.8 0 2.5L9 19.5l1.1-1.1-6.3-6.3c-.2 0-.2-.2-.1-.3z\" />\r\n\t</SVG>\r\n);\r\n\r\nexport default symbol;\r\n","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"notices\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"coreData\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"privateApis\"];","/**\r\n * WordPress dependencies\r\n */\r\nimport { __dangerousOptInToUnstableAPIsOnlyForCoreModules } from '@wordpress/private-apis';\r\n\r\nexport const { unlock } = __dangerousOptInToUnstableAPIsOnlyForCoreModules(\r\n\t'I know using unstable features means my theme or plugin will inevitably break in the next version of WordPress.',\r\n\t'@wordpress/reusable-blocks'\r\n);\r\n","/**\r\n * WordPress dependencies\r\n */\r\nimport { hasBlockSupport, isReusableBlock } from '@wordpress/blocks';\r\nimport {\r\n\tstore as blockEditorStore,\r\n\tprivateApis as blockEditorPrivateApis,\r\n} from '@wordpress/block-editor';\r\nimport { useCallback, useState } from '@wordpress/element';\r\nimport {\r\n\tMenuItem,\r\n\tModal,\r\n\tButton,\r\n\tTextControl,\r\n\t__experimentalHStack as HStack,\r\n\t__experimentalVStack as VStack,\r\n\tToggleControl,\r\n} from '@wordpress/components';\r\nimport { symbol } from '@wordpress/icons';\r\nimport { useDispatch, useSelect } from '@wordpress/data';\r\nimport { __, _x, sprintf } from '@wordpress/i18n';\r\nimport { store as noticesStore } from '@wordpress/notices';\r\nimport { store as coreStore } from '@wordpress/core-data';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport { store } from '../../store';\r\nimport { unlock } from '../../lock-unlock';\r\n\r\nconst { useReusableBlocksRenameHint, ReusableBlocksRenameHint } = unlock(\r\n\tblockEditorPrivateApis\r\n);\r\n\r\n/**\r\n * Menu control to convert block(s) to reusable block.\r\n *\r\n * @param {Object}   props              Component props.\r\n * @param {string[]} props.clientIds    Client ids of selected blocks.\r\n * @param {string}   props.rootClientId ID of the currently selected top-level block.\r\n * @param {()=>void} props.onClose      Callback to close the menu.\r\n * @return {import('react').ComponentType} The menu control or null.\r\n */\r\nexport default function ReusableBlockConvertButton( {\r\n\tclientIds,\r\n\trootClientId,\r\n\tonClose,\r\n} ) {\r\n\tconst showRenameHint = useReusableBlocksRenameHint();\r\n\tconst [ syncType, setSyncType ] = useState( undefined );\r\n\tconst [ isModalOpen, setIsModalOpen ] = useState( false );\r\n\tconst [ title, setTitle ] = useState( '' );\r\n\tconst canConvert = useSelect(\r\n\t\t( select ) => {\r\n\t\t\tconst { canUser } = select( coreStore );\r\n\t\t\tconst {\r\n\t\t\t\tgetBlocksByClientId,\r\n\t\t\t\tcanInsertBlockType,\r\n\t\t\t\tgetBlockRootClientId,\r\n\t\t\t} = select( blockEditorStore );\r\n\r\n\t\t\tconst rootId =\r\n\t\t\t\trootClientId ||\r\n\t\t\t\t( clientIds.length > 0\r\n\t\t\t\t\t? getBlockRootClientId( clientIds[ 0 ] )\r\n\t\t\t\t\t: undefined );\r\n\r\n\t\t\tconst blocks = getBlocksByClientId( clientIds ) ?? [];\r\n\r\n\t\t\tconst isReusable =\r\n\t\t\t\tblocks.length === 1 &&\r\n\t\t\t\tblocks[ 0 ] &&\r\n\t\t\t\tisReusableBlock( blocks[ 0 ] ) &&\r\n\t\t\t\t!! select( coreStore ).getEntityRecord(\r\n\t\t\t\t\t'postType',\r\n\t\t\t\t\t'wp_block',\r\n\t\t\t\t\tblocks[ 0 ].attributes.ref\r\n\t\t\t\t);\r\n\r\n\t\t\tconst _canConvert =\r\n\t\t\t\t// Hide when this is already a reusable block.\r\n\t\t\t\t! isReusable &&\r\n\t\t\t\t// Hide when reusable blocks are disabled.\r\n\t\t\t\tcanInsertBlockType( 'core/block', rootId ) &&\r\n\t\t\t\tblocks.every(\r\n\t\t\t\t\t( block ) =>\r\n\t\t\t\t\t\t// Guard against the case where a regular block has *just* been converted.\r\n\t\t\t\t\t\t!! block &&\r\n\t\t\t\t\t\t// Hide on invalid blocks.\r\n\t\t\t\t\t\tblock.isValid &&\r\n\t\t\t\t\t\t// Hide when block doesn't support being made reusable.\r\n\t\t\t\t\t\thasBlockSupport( block.name, 'reusable', true )\r\n\t\t\t\t) &&\r\n\t\t\t\t// Hide when current doesn't have permission to do that.\r\n\t\t\t\t!! canUser( 'create', 'blocks' );\r\n\r\n\t\t\treturn _canConvert;\r\n\t\t},\r\n\t\t[ clientIds, rootClientId ]\r\n\t);\r\n\r\n\tconst { __experimentalConvertBlocksToReusable: convertBlocksToReusable } =\r\n\t\tuseDispatch( store );\r\n\r\n\tconst { createSuccessNotice, createErrorNotice } =\r\n\t\tuseDispatch( noticesStore );\r\n\tconst onConvert = useCallback(\r\n\t\tasync function ( reusableBlockTitle ) {\r\n\t\t\ttry {\r\n\t\t\t\tawait convertBlocksToReusable(\r\n\t\t\t\t\tclientIds,\r\n\t\t\t\t\treusableBlockTitle,\r\n\t\t\t\t\tsyncType\r\n\t\t\t\t);\r\n\t\t\t\tcreateSuccessNotice(\r\n\t\t\t\t\t! syncType\r\n\t\t\t\t\t\t? sprintf(\r\n\t\t\t\t\t\t\t\t// translators: %s: the name the user has given to the pattern.\r\n\t\t\t\t\t\t\t\t__( 'Synced pattern created: %s' ),\r\n\t\t\t\t\t\t\t\treusableBlockTitle\r\n\t\t\t\t\t\t  )\r\n\t\t\t\t\t\t: sprintf(\r\n\t\t\t\t\t\t\t\t// translators: %s: the name the user has given to the pattern.\r\n\t\t\t\t\t\t\t\t__( 'Unsynced pattern created: %s' ),\r\n\t\t\t\t\t\t\t\treusableBlockTitle\r\n\t\t\t\t\t\t  ),\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttype: 'snackbar',\r\n\t\t\t\t\t\tid: 'convert-to-reusable-block-success',\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t} catch ( error ) {\r\n\t\t\t\tcreateErrorNotice( error.message, {\r\n\t\t\t\t\ttype: 'snackbar',\r\n\t\t\t\t\tid: 'convert-to-reusable-block-error',\r\n\t\t\t\t} );\r\n\t\t\t}\r\n\t\t},\r\n\t\t[\r\n\t\t\tconvertBlocksToReusable,\r\n\t\t\tclientIds,\r\n\t\t\tsyncType,\r\n\t\t\tcreateSuccessNotice,\r\n\t\t\tcreateErrorNotice,\r\n\t\t]\r\n\t);\r\n\r\n\tif ( ! canConvert ) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<MenuItem icon={ symbol } onClick={ () => setIsModalOpen( true ) }>\r\n\t\t\t\t{ showRenameHint\r\n\t\t\t\t\t? __( 'Create pattern/reusable block' )\r\n\t\t\t\t\t: __( 'Create pattern' ) }\r\n\t\t\t</MenuItem>\r\n\t\t\t{ isModalOpen && (\r\n\t\t\t\t<Modal\r\n\t\t\t\t\ttitle={ __( 'Create pattern' ) }\r\n\t\t\t\t\tonRequestClose={ () => {\r\n\t\t\t\t\t\tsetIsModalOpen( false );\r\n\t\t\t\t\t\tsetTitle( '' );\r\n\t\t\t\t\t} }\r\n\t\t\t\t\toverlayClassName=\"reusable-blocks-menu-items__convert-modal\"\r\n\t\t\t\t>\r\n\t\t\t\t\t<form\r\n\t\t\t\t\t\tonSubmit={ ( event ) => {\r\n\t\t\t\t\t\t\tevent.preventDefault();\r\n\t\t\t\t\t\t\tonConvert( title );\r\n\t\t\t\t\t\t\tsetIsModalOpen( false );\r\n\t\t\t\t\t\t\tsetTitle( '' );\r\n\t\t\t\t\t\t\tonClose();\r\n\t\t\t\t\t\t} }\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<VStack spacing=\"5\">\r\n\t\t\t\t\t\t\t<ReusableBlocksRenameHint />\r\n\t\t\t\t\t\t\t<TextControl\r\n\t\t\t\t\t\t\t\t__nextHasNoMarginBottom\r\n\t\t\t\t\t\t\t\tlabel={ __( 'Name' ) }\r\n\t\t\t\t\t\t\t\tvalue={ title }\r\n\t\t\t\t\t\t\t\tonChange={ setTitle }\r\n\t\t\t\t\t\t\t\tplaceholder={ __( 'My pattern' ) }\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t<ToggleControl\r\n\t\t\t\t\t\t\t\tlabel={ _x(\r\n\t\t\t\t\t\t\t\t\t'Synced',\r\n\t\t\t\t\t\t\t\t\t'Option that makes an individual pattern synchronized'\r\n\t\t\t\t\t\t\t\t) }\r\n\t\t\t\t\t\t\t\thelp={ __(\r\n\t\t\t\t\t\t\t\t\t'Sync this pattern across multiple locations.'\r\n\t\t\t\t\t\t\t\t) }\r\n\t\t\t\t\t\t\t\tchecked={ ! syncType }\r\n\t\t\t\t\t\t\t\tonChange={ () => {\r\n\t\t\t\t\t\t\t\t\tsetSyncType(\r\n\t\t\t\t\t\t\t\t\t\t! syncType ? 'unsynced' : undefined\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t} }\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t<HStack justify=\"right\">\r\n\t\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t\tvariant=\"tertiary\"\r\n\t\t\t\t\t\t\t\t\tonClick={ () => {\r\n\t\t\t\t\t\t\t\t\t\tsetIsModalOpen( false );\r\n\t\t\t\t\t\t\t\t\t\tsetTitle( '' );\r\n\t\t\t\t\t\t\t\t\t} }\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t{ __( 'Cancel' ) }\r\n\t\t\t\t\t\t\t\t</Button>\r\n\r\n\t\t\t\t\t\t\t\t<Button variant=\"primary\" type=\"submit\">\r\n\t\t\t\t\t\t\t\t\t{ __( 'Create' ) }\r\n\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t</HStack>\r\n\t\t\t\t\t\t</VStack>\r\n\t\t\t\t\t</form>\r\n\t\t\t\t</Modal>\r\n\t\t\t) }\r\n\t\t</>\r\n\t);\r\n}\r\n","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"url\"];","/**\r\n * WordPress dependencies\r\n */\r\nimport { MenuItem } from '@wordpress/components';\r\nimport { __ } from '@wordpress/i18n';\r\nimport { isReusableBlock } from '@wordpress/blocks';\r\nimport { useSelect, useDispatch } from '@wordpress/data';\r\nimport { store as blockEditorStore } from '@wordpress/block-editor';\r\nimport { addQueryArgs } from '@wordpress/url';\r\nimport { store as coreStore } from '@wordpress/core-data';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport { store as reusableBlocksStore } from '../../store';\r\n\r\nfunction ReusableBlocksManageButton( { clientId } ) {\r\n\tconst { canRemove, isVisible, managePatternsUrl } = useSelect(\r\n\t\t( select ) => {\r\n\t\t\tconst { getBlock, canRemoveBlock, getBlockCount, getSettings } =\r\n\t\t\t\tselect( blockEditorStore );\r\n\t\t\tconst { canUser } = select( coreStore );\r\n\t\t\tconst reusableBlock = getBlock( clientId );\r\n\t\t\tconst isBlockTheme = getSettings().__unstableIsBlockBasedTheme;\r\n\r\n\t\t\treturn {\r\n\t\t\t\tcanRemove: canRemoveBlock( clientId ),\r\n\t\t\t\tisVisible:\r\n\t\t\t\t\t!! reusableBlock &&\r\n\t\t\t\t\tisReusableBlock( reusableBlock ) &&\r\n\t\t\t\t\t!! canUser(\r\n\t\t\t\t\t\t'update',\r\n\t\t\t\t\t\t'blocks',\r\n\t\t\t\t\t\treusableBlock.attributes.ref\r\n\t\t\t\t\t),\r\n\t\t\t\tinnerBlockCount: getBlockCount( clientId ),\r\n\t\t\t\t// The site editor and templates both check whether the user\r\n\t\t\t\t// has edit_theme_options capabilities. We can leverage that here\r\n\t\t\t\t// and omit the manage patterns link if the user can't access it.\r\n\t\t\t\tmanagePatternsUrl:\r\n\t\t\t\t\tisBlockTheme && canUser( 'read', 'templates' )\r\n\t\t\t\t\t\t? addQueryArgs( 'site-editor.php', {\r\n\t\t\t\t\t\t\t\tpath: '/patterns',\r\n\t\t\t\t\t\t  } )\r\n\t\t\t\t\t\t: addQueryArgs( 'edit.php', {\r\n\t\t\t\t\t\t\t\tpost_type: 'wp_block',\r\n\t\t\t\t\t\t  } ),\r\n\t\t\t};\r\n\t\t},\r\n\t\t[ clientId ]\r\n\t);\r\n\r\n\tconst { __experimentalConvertBlockToStatic: convertBlockToStatic } =\r\n\t\tuseDispatch( reusableBlocksStore );\r\n\r\n\tif ( ! isVisible ) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<MenuItem href={ managePatternsUrl }>\r\n\t\t\t\t{ __( 'Manage patterns' ) }\r\n\t\t\t</MenuItem>\r\n\t\t\t{ canRemove && (\r\n\t\t\t\t<MenuItem onClick={ () => convertBlockToStatic( clientId ) }>\r\n\t\t\t\t\t{ __( 'Detach' ) }\r\n\t\t\t\t</MenuItem>\r\n\t\t\t) }\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default ReusableBlocksManageButton;\r\n","/**\r\n * WordPress dependencies\r\n */\r\nimport { BlockSettingsMenuControls } from '@wordpress/block-editor';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport ReusableBlockConvertButton from './reusable-block-convert-button';\r\nimport ReusableBlocksManageButton from './reusable-blocks-manage-button';\r\n\r\nexport default function ReusableBlocksMenuItems( { rootClientId } ) {\r\n\treturn (\r\n\t\t<BlockSettingsMenuControls>\r\n\t\t\t{ ( { onClose, selectedClientIds } ) => (\r\n\t\t\t\t<>\r\n\t\t\t\t\t<ReusableBlockConvertButton\r\n\t\t\t\t\t\tclientIds={ selectedClientIds }\r\n\t\t\t\t\t\trootClientId={ rootClientId }\r\n\t\t\t\t\t\tonClose={ onClose }\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t{ selectedClientIds.length === 1 && (\r\n\t\t\t\t\t\t<ReusableBlocksManageButton\r\n\t\t\t\t\t\t\tclientId={ selectedClientIds[ 0 ] }\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t) }\r\n\t\t\t\t</>\r\n\t\t\t) }\r\n\t\t</BlockSettingsMenuControls>\r\n\t);\r\n}\r\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","window","__experimentalConvertBlockToStatic","clientId","registry","oldBlock","select","blockEditorStore","getBlock","reusableBlock","getEditedEntityRecord","attributes","ref","newBlocks","parse","content","dispatch","replaceBlocks","__experimentalConvertBlocksToReusable","clientIds","title","syncType","async","meta","wp_pattern_sync_status","undefined","__","serialize","getBlocksByClientId","status","updatedRecord","saveEntityRecord","newBlock","createBlock","id","__experimentalSetEditingReusableBlock","__experimentalDeleteReusableBlock","associatedBlockClientIds","getBlocks","filter","block","isReusableBlock","map","length","removeBlocks","deleteEntityRecord","isEditing","type","combineReducers","isEditingReusableBlock","state","action","__experimentalIsEditingReusableBlock","store","createReduxStore","actions","reducer","selectors","register","createElement","SVG","xmlns","viewBox","Path","d","unlock","__dangerousOptInToUnstableAPIsOnlyForCoreModules","useReusableBlocksRenameHint","ReusableBlocksRenameHint","blockEditorPrivateApis","ReusableBlockConvertButton","rootClientId","onClose","showRenameHint","setSyncType","useState","isModalOpen","setIsModalOpen","setTitle","canConvert","useSelect","_getBlocksByClientId","canUser","coreStore","canInsertBlockType","getBlockRootClientId","rootId","blocks","getEntityRecord","every","isValid","hasBlockSupport","name","convertBlocksToReusable","useDispatch","createSuccessNotice","createErrorNotice","noticesStore","onConvert","useCallback","reusableBlockTitle","sprintf","error","message","Fragment","MenuItem","icon","symbol","onClick","Modal","onRequestClose","overlayClassName","onSubmit","event","preventDefault","VStack","spacing","TextControl","__nextHasNoMarginBottom","label","onChange","placeholder","ToggleControl","_x","help","checked","HStack","justify","Button","variant","canRemove","isVisible","managePatternsUrl","canRemoveBlock","getBlockCount","getSettings","isBlockTheme","__unstableIsBlockBasedTheme","innerBlockCount","addQueryArgs","path","post_type","convertBlockToStatic","reusableBlocksStore","href","ReusableBlocksMenuItems","BlockSettingsMenuControls","selectedClientIds","ReusableBlocksManageButton"],"sourceRoot":""}