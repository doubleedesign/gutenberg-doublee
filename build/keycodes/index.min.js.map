{"version":3,"file":"./build/keycodes/index.min.js","mappings":"mBACA,IAAIA,EAAsB,CCA1BA,EAAwB,CAACC,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXF,EAAoBI,EAAEF,EAAYC,KAASH,EAAoBI,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDH,EAAwB,CAACS,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFV,EAAyBC,IACH,oBAAXa,QAA0BA,OAAOC,aAC1CV,OAAOC,eAAeL,EAASa,OAAOC,YAAa,CAAEC,MAAO,WAE7DX,OAAOC,eAAeL,EAAS,aAAc,CAAEe,OAAO,GAAO,G,iZCL9D,MAAM,EAA+BC,OAAW,GAAQ,KCOjD,SAASC,EAAWC,EAAU,MACpC,IAAOA,EAAU,CAChB,GAAuB,oBAAXF,OACX,OAAO,EAGRE,EAAUF,MACX,CAEA,MAAM,SAAEG,GAAaD,EAAQE,UAE7B,OACgC,IAA/BD,EAASE,QAAS,QAClB,CAAE,OAAQ,UAAWC,SAAUH,EAEjC,CCwBO,MAAMI,EAAY,EAKZC,EAAM,EAKNC,EAAQ,GAKRC,EAAS,GAKTC,EAAQ,GAKRC,EAAS,GAKTC,EAAW,GAKXC,EAAM,GAKNC,EAAO,GAKPC,EAAO,GAKPC,EAAK,GAKLC,EAAQ,GAKRC,EAAO,GAKPC,EAAS,GAKTC,EAAM,IAKNC,EAAM,MAKNC,EAAO,OAKPC,EAAU,OAKVC,EAAQ,QAKRC,EAAO,GASpB,SAASC,EAA0BC,GAClC,OAAOA,EAAOC,OAAS,EACpBD,EAAOE,cACPF,EAAOG,OAAQ,GAAID,cAAgBF,EAAOI,MAAO,EACrD,CAYA,SAASC,EAAWC,EAAQC,GAC3B,OAAO/C,OAAOgD,YACbhD,OAAOiD,QAASH,GAASI,KAAK,EAAIpD,EAAKa,KAAa,CACnDb,EACAiD,EAAOpC,MAGV,CAQO,MAAMwC,EAAY,CACxBC,QAAWC,GAAgBA,IAAa,CAAEjB,GAAY,CAAED,GACxDmB,aAAgBD,GACfA,IAAa,CAAEhB,EAAOD,GAAY,CAAED,EAAME,GAC3CkB,WAAcF,GACbA,IAAa,CAAEnB,EAAKE,GAAY,CAAED,EAAMD,GACzCsB,UAAaH,GACZA,IAAa,CAAEhB,EAAOH,EAAKE,GAAY,CAAED,EAAME,EAAOH,GACvDuB,OAAUJ,GAAgBA,IAAa,CAAElB,EAAMD,GAAQ,CAAEG,EAAOH,GAChEwB,KAAMA,IAAM,CAAEvB,GACdwB,IAAKA,IAAM,CAAEzB,GACb0B,UAAWA,IAAM,CAAEzB,EAAME,GACzBwB,MAAOA,IAAM,CAAExB,GACfyB,SAAUA,IAAM,CAAEzB,EAAOH,GACzB6B,UAAWA,IAAM,IAkBLC,EAAcnB,EAC1BM,GAC4Bc,GACgB,CAC1CC,EACAb,EAAWxC,IAEJ,IAAKoD,EAAUZ,GAAYa,EAAUC,eAAgBC,KAC3D,OAmBSC,EAAsBxB,EAClCM,GAC4Bc,GACkB,CAC5CC,EACAb,EAAWxC,KAEX,MAAMyD,EAAUjB,IACVkB,EAAoB,CACzB,CAAErC,GAAOoC,EAAU,IAAM,MACzB,CAAEnC,GAAQmC,EAAU,IAAM,OAC1B,CAAElC,GAAW,IACb,CAAEC,GAASiC,EAAU,IAAM,SAgB5B,MAAO,IAbcL,EAAUZ,GAAWmB,QACzC,CAAEC,EAAa3E,KAAS,IAAA4E,EACvB,MAAMC,EAAyC,QAA3BD,EAAGH,EAAmBzE,UAAK,IAAA4E,EAAAA,EAAI5E,EAEnD,OAAKwE,EACG,IAAKG,EAAaE,GAGnB,IAAKF,EAAaE,EAAgB,IAAK,GAErB,IAGDpC,EAA0B2B,GAAa,IAkBvDU,EAAkB/B,EAC9BwB,GACwCQ,GACI,CAC1CX,EACAb,EAAWxC,IACPgE,EAAcX,EAAWb,GAAWe,KAAM,MAkBpCU,EAAoBjC,EAChCM,GAC4Bc,GACgB,CAC1CC,EACAb,EAAWxC,KAEX,MAAMyD,EAAUjB,IAEVkB,EAAoB,CACzB,CAAElC,GAAS,QACX,CAAED,GAAWkC,EAAU,UAAY,UACnC,CAAEnC,GAAQ,UACV,CAAED,GAAOoC,EAAU,SAAW;;AAE9B,KAAKS,EAAAA,EAAAA,IAAI;;AAET,KAAKA,EAAAA,EAAAA,IAAI;;AAET,KAAKA,EAAAA,EAAAA,IAAI;;AAET,KAAKA,EAAAA,EAAAA,IAAI,UAGV,MAAO,IAAKd,EAAUZ,GAAYa,GAChChB,KAAOpD,IAAG,IAAAkF,EAAA,OACVzC,EAAkD,QAA1ByC,EAAET,EAAmBzE,UAAK,IAAAkF,EAAAA,EAAIlF,EAAK,IAE3DsE,KAAME,EAAU,IAAM,MAAO,IA2CrBW,EAAkBpC,EAC9BM,GAC4B+B,GACa,CACvCC,EACAjB,EACAb,EAAWxC,KAEX,MAAMuE,EAAOF,EAAc7B,GACrBgC,EAvCT,SAA4BF,GAC3B,MAAyC,CACxCjD,EACAC,EACAC,EACAC,GACGiD,QACDxF,GACDqF,EAAM,GAEArF,SAIT,CAyBqByF,CAAmBJ,GAE/BK,EAA6B,CAClCC,MAAO,IACPC,UAAW,KAEXC,OAAQ,KACRC,QAAS,MAGJC,EAAWT,EAAKE,QACnBQ,IAAWT,EAAUnE,SAAU4E,KAE5BC,EAAgBV,EAAUC,QAC7BQ,IAAWV,EAAKlE,SAAU4E,KAG7B,GAAKD,EAASpD,OAAS,GAAKsD,EAActD,OAAS,EAClD,OAAO,EAGR,IAAI3C,EAAMqF,EAAMrF,IAAIqE,cAEpB,OAAOD,GAIFiB,EAAMa,QAA+B,IAArB9B,EAAUzB,SAC9B3C,EAAMmG,OAAOC,aAAcf,EAAMgB,SAAUhC,eAS3CgB,EAAMiB,UACe,IAArBlC,EAAUzB,QACV+C,EAA4BL,EAAMkB,QAElCvG,EAAM0F,EAA4BL,EAAMkB,OAItB,QAAdnC,IACJA,EAAY,UAGNpE,IAAQoE,EAAUC,eAzBjBiB,EAAKlE,SAA0CpB,EAyBjB,K","sources":["webpack://wp/webpack/bootstrap","webpack://wp/webpack/runtime/define property getters","webpack://wp/webpack/runtime/hasOwnProperty shorthand","webpack://wp/webpack/runtime/make namespace object","webpack://wp/external window [\"wp\",\"i18n\"]","../../packages/keycodes/src/platform.js","../../packages/keycodes/src/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"i18n\"];","/**\r\n * Return true if platform is MacOS.\r\n *\r\n * @param {Window?} _window window object by default; used for DI testing.\r\n *\r\n * @return {boolean} True if MacOS; false otherwise.\r\n */\r\nexport function isAppleOS( _window = null ) {\r\n\tif ( ! _window ) {\r\n\t\tif ( typeof window === 'undefined' ) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t_window = window;\r\n\t}\r\n\r\n\tconst { platform } = _window.navigator;\r\n\r\n\treturn (\r\n\t\tplatform.indexOf( 'Mac' ) !== -1 ||\r\n\t\t[ 'iPad', 'iPhone' ].includes( platform )\r\n\t);\r\n}\r\n","/**\r\n * Note: The order of the modifier keys in many of the [foo]Shortcut()\r\n * functions in this file are intentional and should not be changed. They're\r\n * designed to fit with the standard menu keyboard shortcuts shown in the\r\n * user's platform.\r\n *\r\n * For example, on MacOS menu shortcuts will place Shift before Command, but\r\n * on Windows Control will usually come first. So don't provide your own\r\n * shortcut combos directly to keyboardShortcut().\r\n */\r\n\r\n/**\r\n * WordPress dependencies\r\n */\r\nimport { __ } from '@wordpress/i18n';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport { isAppleOS } from './platform';\r\n\r\n/** @typedef {typeof ALT | CTRL | COMMAND | SHIFT } WPModifierPart */\r\n\r\n/** @typedef {'primary' | 'primaryShift' | 'primaryAlt' | 'secondary' | 'access' | 'ctrl' | 'alt' | 'ctrlShift' | 'shift' | 'shiftAlt' | 'undefined'} WPKeycodeModifier */\r\n\r\n/**\r\n * An object of handler functions for each of the possible modifier\r\n * combinations. A handler will return a value for a given key.\r\n *\r\n * @template T\r\n *\r\n * @typedef {Record<WPKeycodeModifier, T>} WPModifierHandler\r\n */\r\n\r\n/**\r\n * @template T\r\n *\r\n * @typedef {(character: string, isApple?: () => boolean) => T} WPKeyHandler\r\n */\r\n/** @typedef {(event: import('react').KeyboardEvent<HTMLElement> | KeyboardEvent, character: string, isApple?: () => boolean) => boolean} WPEventKeyHandler */\r\n\r\n/** @typedef {( isApple: () => boolean ) => WPModifierPart[]} WPModifier */\r\n\r\n/**\r\n * Keycode for BACKSPACE key.\r\n */\r\nexport const BACKSPACE = 8;\r\n\r\n/**\r\n * Keycode for TAB key.\r\n */\r\nexport const TAB = 9;\r\n\r\n/**\r\n * Keycode for ENTER key.\r\n */\r\nexport const ENTER = 13;\r\n\r\n/**\r\n * Keycode for ESCAPE key.\r\n */\r\nexport const ESCAPE = 27;\r\n\r\n/**\r\n * Keycode for SPACE key.\r\n */\r\nexport const SPACE = 32;\r\n\r\n/**\r\n * Keycode for PAGEUP key.\r\n */\r\nexport const PAGEUP = 33;\r\n\r\n/**\r\n * Keycode for PAGEDOWN key.\r\n */\r\nexport const PAGEDOWN = 34;\r\n\r\n/**\r\n * Keycode for END key.\r\n */\r\nexport const END = 35;\r\n\r\n/**\r\n * Keycode for HOME key.\r\n */\r\nexport const HOME = 36;\r\n\r\n/**\r\n * Keycode for LEFT key.\r\n */\r\nexport const LEFT = 37;\r\n\r\n/**\r\n * Keycode for UP key.\r\n */\r\nexport const UP = 38;\r\n\r\n/**\r\n * Keycode for RIGHT key.\r\n */\r\nexport const RIGHT = 39;\r\n\r\n/**\r\n * Keycode for DOWN key.\r\n */\r\nexport const DOWN = 40;\r\n\r\n/**\r\n * Keycode for DELETE key.\r\n */\r\nexport const DELETE = 46;\r\n\r\n/**\r\n * Keycode for F10 key.\r\n */\r\nexport const F10 = 121;\r\n\r\n/**\r\n * Keycode for ALT key.\r\n */\r\nexport const ALT = 'alt';\r\n\r\n/**\r\n * Keycode for CTRL key.\r\n */\r\nexport const CTRL = 'ctrl';\r\n\r\n/**\r\n * Keycode for COMMAND/META key.\r\n */\r\nexport const COMMAND = 'meta';\r\n\r\n/**\r\n * Keycode for SHIFT key.\r\n */\r\nexport const SHIFT = 'shift';\r\n\r\n/**\r\n * Keycode for ZERO key.\r\n */\r\nexport const ZERO = 48;\r\n\r\nexport { isAppleOS };\r\n\r\n/**\r\n * Capitalise the first character of a string.\r\n * @param {string} string String to capitalise.\r\n * @return {string} Capitalised string.\r\n */\r\nfunction capitaliseFirstCharacter( string ) {\r\n\treturn string.length < 2\r\n\t\t? string.toUpperCase()\r\n\t\t: string.charAt( 0 ).toUpperCase() + string.slice( 1 );\r\n}\r\n\r\n/**\r\n * Map the values of an object with a specified callback and return the result object.\r\n *\r\n * @template {{ [s: string]: any; } | ArrayLike<any>} T\r\n *\r\n * @param {T}                     object Object to map values of.\r\n * @param {( value: any ) => any} mapFn  Mapping function\r\n *\r\n * @return {any} Active modifier constants.\r\n */\r\nfunction mapValues( object, mapFn ) {\r\n\treturn Object.fromEntries(\r\n\t\tObject.entries( object ).map( ( [ key, value ] ) => [\r\n\t\t\tkey,\r\n\t\t\tmapFn( value ),\r\n\t\t] )\r\n\t);\r\n}\r\n\r\n/**\r\n * Object that contains functions that return the available modifier\r\n * depending on platform.\r\n *\r\n * @type {WPModifierHandler< ( isApple: () => boolean ) => WPModifierPart[]>}\r\n */\r\nexport const modifiers = {\r\n\tprimary: ( _isApple ) => ( _isApple() ? [ COMMAND ] : [ CTRL ] ),\r\n\tprimaryShift: ( _isApple ) =>\r\n\t\t_isApple() ? [ SHIFT, COMMAND ] : [ CTRL, SHIFT ],\r\n\tprimaryAlt: ( _isApple ) =>\r\n\t\t_isApple() ? [ ALT, COMMAND ] : [ CTRL, ALT ],\r\n\tsecondary: ( _isApple ) =>\r\n\t\t_isApple() ? [ SHIFT, ALT, COMMAND ] : [ CTRL, SHIFT, ALT ],\r\n\taccess: ( _isApple ) => ( _isApple() ? [ CTRL, ALT ] : [ SHIFT, ALT ] ),\r\n\tctrl: () => [ CTRL ],\r\n\talt: () => [ ALT ],\r\n\tctrlShift: () => [ CTRL, SHIFT ],\r\n\tshift: () => [ SHIFT ],\r\n\tshiftAlt: () => [ SHIFT, ALT ],\r\n\tundefined: () => [],\r\n};\r\n\r\n/**\r\n * An object that contains functions to get raw shortcuts.\r\n *\r\n * These are intended for user with the KeyboardShortcuts.\r\n *\r\n * @example\r\n * ```js\r\n * // Assuming macOS:\r\n * rawShortcut.primary( 'm' )\r\n * // \"meta+m\"\"\r\n * ```\r\n *\r\n * @type {WPModifierHandler<WPKeyHandler<string>>} Keyed map of functions to raw\r\n *                                                 shortcuts.\r\n */\r\nexport const rawShortcut = mapValues(\r\n\tmodifiers,\r\n\t( /** @type {WPModifier} */ modifier ) => {\r\n\t\treturn /** @type {WPKeyHandler<string>} */ (\r\n\t\t\tcharacter,\r\n\t\t\t_isApple = isAppleOS\r\n\t\t) => {\r\n\t\t\treturn [ ...modifier( _isApple ), character.toLowerCase() ].join(\r\n\t\t\t\t'+'\r\n\t\t\t);\r\n\t\t};\r\n\t}\r\n);\r\n\r\n/**\r\n * Return an array of the parts of a keyboard shortcut chord for display.\r\n *\r\n * @example\r\n * ```js\r\n * // Assuming macOS:\r\n * displayShortcutList.primary( 'm' );\r\n * // [ \"⌘\", \"M\" ]\r\n * ```\r\n *\r\n * @type {WPModifierHandler<WPKeyHandler<string[]>>} Keyed map of functions to\r\n *                                                   shortcut sequences.\r\n */\r\nexport const displayShortcutList = mapValues(\r\n\tmodifiers,\r\n\t( /** @type {WPModifier} */ modifier ) => {\r\n\t\treturn /** @type {WPKeyHandler<string[]>} */ (\r\n\t\t\tcharacter,\r\n\t\t\t_isApple = isAppleOS\r\n\t\t) => {\r\n\t\t\tconst isApple = _isApple();\r\n\t\t\tconst replacementKeyMap = {\r\n\t\t\t\t[ ALT ]: isApple ? '⌥' : 'Alt',\r\n\t\t\t\t[ CTRL ]: isApple ? '⌃' : 'Ctrl', // Make sure ⌃ is the U+2303 UP ARROWHEAD unicode character and not the caret character.\r\n\t\t\t\t[ COMMAND ]: '⌘',\r\n\t\t\t\t[ SHIFT ]: isApple ? '⇧' : 'Shift',\r\n\t\t\t};\r\n\r\n\t\t\tconst modifierKeys = modifier( _isApple ).reduce(\r\n\t\t\t\t( accumulator, key ) => {\r\n\t\t\t\t\tconst replacementKey = replacementKeyMap[ key ] ?? key;\r\n\t\t\t\t\t// If on the Mac, adhere to platform convention and don't show plus between keys.\r\n\t\t\t\t\tif ( isApple ) {\r\n\t\t\t\t\t\treturn [ ...accumulator, replacementKey ];\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn [ ...accumulator, replacementKey, '+' ];\r\n\t\t\t\t},\r\n\t\t\t\t/** @type {string[]} */ ( [] )\r\n\t\t\t);\r\n\r\n\t\t\treturn [ ...modifierKeys, capitaliseFirstCharacter( character ) ];\r\n\t\t};\r\n\t}\r\n);\r\n\r\n/**\r\n * An object that contains functions to display shortcuts.\r\n *\r\n * @example\r\n * ```js\r\n * // Assuming macOS:\r\n * displayShortcut.primary( 'm' );\r\n * // \"⌘M\"\r\n * ```\r\n *\r\n * @type {WPModifierHandler<WPKeyHandler<string>>} Keyed map of functions to\r\n *                                                 display shortcuts.\r\n */\r\nexport const displayShortcut = mapValues(\r\n\tdisplayShortcutList,\r\n\t( /** @type {WPKeyHandler<string[]>} */ shortcutList ) => {\r\n\t\treturn /** @type {WPKeyHandler<string>} */ (\r\n\t\t\tcharacter,\r\n\t\t\t_isApple = isAppleOS\r\n\t\t) => shortcutList( character, _isApple ).join( '' );\r\n\t}\r\n);\r\n\r\n/**\r\n * An object that contains functions to return an aria label for a keyboard\r\n * shortcut.\r\n *\r\n * @example\r\n * ```js\r\n * // Assuming macOS:\r\n * shortcutAriaLabel.primary( '.' );\r\n * // \"Command + Period\"\r\n * ```\r\n *\r\n * @type {WPModifierHandler<WPKeyHandler<string>>} Keyed map of functions to\r\n *                                                 shortcut ARIA labels.\r\n */\r\nexport const shortcutAriaLabel = mapValues(\r\n\tmodifiers,\r\n\t( /** @type {WPModifier} */ modifier ) => {\r\n\t\treturn /** @type {WPKeyHandler<string>} */ (\r\n\t\t\tcharacter,\r\n\t\t\t_isApple = isAppleOS\r\n\t\t) => {\r\n\t\t\tconst isApple = _isApple();\r\n\t\t\t/** @type {Record<string,string>} */\r\n\t\t\tconst replacementKeyMap = {\r\n\t\t\t\t[ SHIFT ]: 'Shift',\r\n\t\t\t\t[ COMMAND ]: isApple ? 'Command' : 'Control',\r\n\t\t\t\t[ CTRL ]: 'Control',\r\n\t\t\t\t[ ALT ]: isApple ? 'Option' : 'Alt',\r\n\t\t\t\t/* translators: comma as in the character ',' */\r\n\t\t\t\t',': __( 'Comma' ),\r\n\t\t\t\t/* translators: period as in the character '.' */\r\n\t\t\t\t'.': __( 'Period' ),\r\n\t\t\t\t/* translators: backtick as in the character '`' */\r\n\t\t\t\t'`': __( 'Backtick' ),\r\n\t\t\t\t/* translators: tilde as in the character '~' */\r\n\t\t\t\t'~': __( 'Tilde' ),\r\n\t\t\t};\r\n\r\n\t\t\treturn [ ...modifier( _isApple ), character ]\r\n\t\t\t\t.map( ( key ) =>\r\n\t\t\t\t\tcapitaliseFirstCharacter( replacementKeyMap[ key ] ?? key )\r\n\t\t\t\t)\r\n\t\t\t\t.join( isApple ? ' ' : ' + ' );\r\n\t\t};\r\n\t}\r\n);\r\n\r\n/**\r\n * From a given KeyboardEvent, returns an array of active modifier constants for\r\n * the event.\r\n *\r\n * @param {import('react').KeyboardEvent<HTMLElement> | KeyboardEvent} event Keyboard event.\r\n *\r\n * @return {Array<WPModifierPart>} Active modifier constants.\r\n */\r\nfunction getEventModifiers( event ) {\r\n\treturn /** @type {WPModifierPart[]} */ ( [\r\n\t\tALT,\r\n\t\tCTRL,\r\n\t\tCOMMAND,\r\n\t\tSHIFT,\r\n\t] ).filter(\r\n\t\t( key ) =>\r\n\t\t\tevent[\r\n\t\t\t\t/** @type {'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'} */ (\r\n\t\t\t\t\t`${ key }Key`\r\n\t\t\t\t)\r\n\t\t\t]\r\n\t);\r\n}\r\n\r\n/**\r\n * An object that contains functions to check if a keyboard event matches a\r\n * predefined shortcut combination.\r\n *\r\n * @example\r\n * ```js\r\n * // Assuming an event for ⌘M key press:\r\n * isKeyboardEvent.primary( event, 'm' );\r\n * // true\r\n * ```\r\n *\r\n * @type {WPModifierHandler<WPEventKeyHandler>} Keyed map of functions\r\n *                                                       to match events.\r\n */\r\nexport const isKeyboardEvent = mapValues(\r\n\tmodifiers,\r\n\t( /** @type {WPModifier} */ getModifiers ) => {\r\n\t\treturn /** @type {WPEventKeyHandler} */ (\r\n\t\t\tevent,\r\n\t\t\tcharacter,\r\n\t\t\t_isApple = isAppleOS\r\n\t\t) => {\r\n\t\t\tconst mods = getModifiers( _isApple );\r\n\t\t\tconst eventMods = getEventModifiers( event );\r\n\t\t\t/** @type {Record<string,string>} */\r\n\t\t\tconst replacementWithShiftKeyMap = {\r\n\t\t\t\tComma: ',',\r\n\t\t\t\tBackslash: '\\\\',\r\n\t\t\t\t// Windows returns `\\` for both IntlRo and IntlYen.\r\n\t\t\t\tIntlRo: '\\\\',\r\n\t\t\t\tIntlYen: '\\\\',\r\n\t\t\t};\r\n\r\n\t\t\tconst modsDiff = mods.filter(\r\n\t\t\t\t( mod ) => ! eventMods.includes( mod )\r\n\t\t\t);\r\n\t\t\tconst eventModsDiff = eventMods.filter(\r\n\t\t\t\t( mod ) => ! mods.includes( mod )\r\n\t\t\t);\r\n\r\n\t\t\tif ( modsDiff.length > 0 || eventModsDiff.length > 0 ) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tlet key = event.key.toLowerCase();\r\n\r\n\t\t\tif ( ! character ) {\r\n\t\t\t\treturn mods.includes( /** @type {WPModifierPart} */ ( key ) );\r\n\t\t\t}\r\n\r\n\t\t\tif ( event.altKey && character.length === 1 ) {\r\n\t\t\t\tkey = String.fromCharCode( event.keyCode ).toLowerCase();\r\n\t\t\t}\r\n\r\n\t\t\t// `event.key` returns the value of the key pressed, taking into the state of\r\n\t\t\t// modifier keys such as `Shift`. If the shift key is pressed, a different\r\n\t\t\t// value may be returned depending on the keyboard layout. It is necessary to\r\n\t\t\t// convert to the physical key value that don't take into account keyboard\r\n\t\t\t// layout or modifier key state.\r\n\t\t\tif (\r\n\t\t\t\tevent.shiftKey &&\r\n\t\t\t\tcharacter.length === 1 &&\r\n\t\t\t\treplacementWithShiftKeyMap[ event.code ]\r\n\t\t\t) {\r\n\t\t\t\tkey = replacementWithShiftKeyMap[ event.code ];\r\n\t\t\t}\r\n\r\n\t\t\t// For backwards compatibility.\r\n\t\t\tif ( character === 'del' ) {\r\n\t\t\t\tcharacter = 'delete';\r\n\t\t\t}\r\n\r\n\t\t\treturn key === character.toLowerCase();\r\n\t\t};\r\n\t}\r\n);\r\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","window","isAppleOS","_window","platform","navigator","indexOf","includes","BACKSPACE","TAB","ENTER","ESCAPE","SPACE","PAGEUP","PAGEDOWN","END","HOME","LEFT","UP","RIGHT","DOWN","DELETE","F10","ALT","CTRL","COMMAND","SHIFT","ZERO","capitaliseFirstCharacter","string","length","toUpperCase","charAt","slice","mapValues","object","mapFn","fromEntries","entries","map","modifiers","primary","_isApple","primaryShift","primaryAlt","secondary","access","ctrl","alt","ctrlShift","shift","shiftAlt","undefined","rawShortcut","modifier","character","toLowerCase","join","displayShortcutList","isApple","replacementKeyMap","reduce","accumulator","_replacementKeyMap$ke","replacementKey","displayShortcut","shortcutList","shortcutAriaLabel","__","_replacementKeyMap$ke2","isKeyboardEvent","getModifiers","event","mods","eventMods","filter","getEventModifiers","replacementWithShiftKeyMap","Comma","Backslash","IntlRo","IntlYen","modsDiff","mod","eventModsDiff","altKey","String","fromCharCode","keyCode","shiftKey","code"],"sourceRoot":""}